"import {\n    C4RESTFulClient\n} from \"c4restfulclient\";\nimport {\n    C4Logger\n} from 'c4logger';\nimport {\n    C4DependencyService\n} from \"../C4FrameworkTypes/C4DependencyService\";\nimport {\n    C4APIsClient\n} from '../C4FrameworkTypes/C4APIsClient';\n\ntype BasicAccountSearchMediaDTO = {\n    'basic_acc_no': string\n\n    'int_code': number\n\n};\ntype AppAccountSearchDTO = {\n    'app_account' ? : string\n\n    'app_account_like' ? : string\n\n    'app_account_status' ? : number\n\n    'basic_acc_no' ? : string\n\n    'basic_acc_no_like' ? : string\n\n    'column1' ? : string\n\n    'column1_like' ? : string\n\n    'column2' ? : string\n\n    'column2_like' ? : string\n\n    'column3' ? : string\n\n    'column3_like' ? : string\n\n    'column4' ? : string\n\n    'column4_like' ? : string\n\n    'column5' ? : string\n\n    'column5_like' ? : string\n\n    'email' ? : string\n\n    'email_like' ? : string\n\n    'id_card' ? : string\n\n    'id_card_like' ? : string\n\n    'int_code' ? : number\n\n    'label' ? : JsonMapEntity\n\n    'mobilephone' ? : string\n\n    'mobilephone_like' ? : string\n\n    'name' ? : string\n\n    'name_like' ? : string\n\n    'role_nos' ? : string\n\n    'role_nos_like' ? : string\n\n    'sex' ? : number\n\n    'telephone' ? : string\n\n    'telephone_like' ? : string\n\n};\ntype AppRoleModofyDTO = {\n    'access' ? : string\n\n    'attached_info' ? : JsonMapEntity\n\n    'is_enable': number\n\n    'role_name': string\n\n    'role_no': number\n\n    'updated_by': string\n\n};\ntype AppAccountQueryDTO = {\n    'app_account': string\n\n    'app_account_status': number\n\n    'basic_acc_no': string\n\n    'column1' ? : string\n\n    'column2' ? : string\n\n    'column3' ? : string\n\n    'column4' ? : string\n\n    'column5' ? : string\n\n    'email' ? : string\n\n    'id_card' ? : string\n\n    'int_code': number\n\n    'label': JsonMapEntity\n\n    'mobile_phone' ? : string\n\n    'name': string\n\n    'role_nos': string\n\n    'sex': number\n\n    'tele_phone' ? : string\n\n};\ntype AppRoleQueryDTO = {\n    'access': string\n\n    'attached_info' ? : JsonMapEntity\n\n    'id': number\n\n    'inserted_by': string\n\n    'inserted_dt': string\n\n    'is_enable': number\n\n    'role_name': string\n\n    'updated_by': string\n\n    'updated_dt': string\n\n};\ntype JsonResult_string_ = {\n    'code' ? : number\n\n    'data' ? : string\n\n    'msg' ? : string\n\n};\ntype ResourceMatrixDTO = {\n    'action': {}\n\n    'desc': string\n\n    'resource': string\n\n};\ntype AppAccountAddDTO = {\n    'app_account': string\n\n    'basic_account_info': BaseBasicAccountDTO\n\n    'column1' ? : string\n\n    'column2' ? : string\n\n    'column3' ? : string\n\n    'column4' ? : string\n\n    'column5' ? : string\n\n    'inserted_by': string\n\n    'label' ? : JsonMapEntity\n\n    'password': string\n\n    'role_nos' ? : string\n\n};\ntype BaseBasicAccountDTO = {\n    'email' ? : string\n\n    'id_card' ? : string\n\n    'mobilephone' ? : string\n\n    'name': string\n\n    'sex': number\n\n    'telephone' ? : string\n\n};\ntype CommPager_AppAccountQueryDTO_ = {\n    'curren_records' ? : number\n\n    'page_index' ? : number\n\n    'page_size' ? : number\n\n    'records' ? : Array < AppAccountQueryDTO >\n        | AppAccountQueryDTO\n\n    'total_page' ? : number\n\n    'total_record' ? : number\n\n};\ntype AuthUserRoleNameDTO = {\n    'id' ? : number\n\n    'role_name' ? : string\n\n    'user_id' ? : number\n\n};\ntype AppAccountLoginDTO = {\n    'app_account': string\n\n    'password': string\n\n};\ntype AppRoleAddDTO = {\n    'access' ? : string\n\n    'attached_info' ? : JsonMapEntity\n\n    'inserted_by': string\n\n    'role_name': string\n\n};\ntype AppAccountQueryOneDTO = {\n    'app_account': string\n\n    'app_account_status': number\n\n    'basic_acc_no': string\n\n    'column1' ? : string\n\n    'column2' ? : string\n\n    'column3' ? : string\n\n    'column4' ? : string\n\n    'column5' ? : string\n\n    'email' ? : string\n\n    'id_card' ? : string\n\n    'int_code': number\n\n    'label': JsonMapEntity\n\n    'mobile_phone' ? : string\n\n    'name': string\n\n    'role_details': Array < AppAccountRoleDTO >\n        | AppAccountRoleDTO\n\n    'role_nos': string\n\n    'sex': number\n\n    'tele_phone' ? : string\n\n};\ntype JsonResult_List_AuthUserRoleNameDTO__ = {\n    'code' ? : number\n\n    'data' ? : Array < AuthUserRoleNameDTO >\n        | AuthUserRoleNameDTO\n\n    'msg' ? : string\n\n};\ntype JsonResult_AppAccountQueryOneDTO_ = {\n    'code' ? : number\n\n    'data' ? : AppAccountQueryOneDTO\n\n    'msg' ? : string\n\n};\ntype BasicAccountAddDTO = {\n    'email' ? : string\n\n    'id_card' ? : string\n\n    'inserted_by': string\n\n    'mobilephone' ? : string\n\n    'name': string\n\n    'sex': number\n\n    'telephone' ? : string\n\n};\ntype PageSearch_AppRoleSearchDTO_ = {\n    'count' ? : boolean\n\n    'order_by' ? : string\n\n    'page_index' ? : number\n\n    'page_size' ? : number\n\n    'search' ? : AppRoleSearchDTO\n\n};\ntype JsonResult_List_ResourceDetailDTO__ = {\n    'code' ? : number\n\n    'data' ? : Array < ResourceDetailDTO >\n        | ResourceDetailDTO\n\n    'msg' ? : string\n\n};\ntype PageSearch_AppAccountSearchDTO_ = {\n    'count' ? : boolean\n\n    'order_by' ? : string\n\n    'page_index' ? : number\n\n    'page_size' ? : number\n\n    'search' ? : AppAccountSearchDTO\n\n};\ntype AppAccountRoleDTO = {\n    'access': string\n\n    'attached_info' ? : JsonMapEntity\n\n    'role_name': string\n\n    'role_no': number\n\n};\ntype ResourceDetailDTO = {\n    'action': {}\n\n    'desc': string\n\n    'location': string\n\n};\ntype AppRoleSearchDTO = {\n    'access' ? : string\n\n    'access_like' ? : string\n\n    'attached_info' ? : JsonMapEntity\n\n    'inserted_by' ? : string\n\n    'inserted_dt_begin' ? : string\n\n    'inserted_dt_end' ? : string\n\n    'is_enable' ? : number\n\n    'role_name' ? : string\n\n    'role_name_like' ? : string\n\n    'role_no' ? : number\n\n    'updated_by' ? : string\n\n    'updated_dt_begin' ? : string\n\n    'updated_dt_end' ? : string\n\n};\ntype JsonResult_List_RoleResourceDTO__ = {\n    'code' ? : number\n\n    'data' ? : Array < RoleResourceDTO >\n        | RoleResourceDTO\n\n    'msg' ? : string\n\n};\ntype BasicAccountModifyMediaDTO = {\n    'basic_acc_no': string\n\n    'iden_medias': JsonMapEntity\n\n    'int_code': number\n\n    'updated_by': string\n\n};\ntype AppAccountModifyPassDTO = {\n    'app_account': string\n\n    'new_password': string\n\n    'old_password': string\n\n    'updated_by': string\n\n};\ntype RoleResourceDTO = {\n    'name': string\n\n    'resources': Array < ResourceDetailDTO >\n        | ResourceDetailDTO\n\n};\ntype BasicAccountModifyDTO = {\n    'basic_acc_no': string\n\n    'email' ? : string\n\n    'id_card' ? : string\n\n    'mobilephone' ? : string\n\n    'name': string\n\n    'sex': number\n\n    'telephone' ? : string\n\n    'updated_by': string\n\n};\ntype AppAccountModifyDTO = {\n    'app_account': string\n\n    'column1' ? : string\n\n    'column2' ? : string\n\n    'column3' ? : string\n\n    'column4' ? : string\n\n    'column5' ? : string\n\n    'label' ? : JsonMapEntity\n\n    'role_nos' ? : string\n\n    'updated_by': string\n\n};\ntype JsonResult = {\n    'code' ? : number\n\n    'data' ? : {}\n\n    'msg' ? : string\n\n};\ntype JsonMapEntity = {};\ntype JsonResult_AppRoleQueryDTO_ = {\n    'code' ? : number\n\n    'data' ? : AppRoleQueryDTO\n\n    'msg' ? : string\n\n};\n\n/**\n * 威尔公司账户微服务系统\n * @class CTest\n * @param {(string)} [domainOrOptions] - The project domain.\n */\nexport default class CTest extends C4APIsClient {\n\n    constructor(domain ? : string, private logger ? : Logger) {\n        super();\n    }\n\n    getDomain() {\n        if (this.m_Service) {\n            return this.m_Service.getDomain('');\n        }\n        return \"\";\n    }\n\n    addErrorHandler(handler: CallbackHandler) {\n        this.errorHandlers.push(handler);\n    }\n\n    private async request(method: string, url: string, headers: any, qs: any, body: any, form: any, formData: any, fileName: string) {\n        if (this.m_Logger) {\n            this.m_Logger.info(`Call ${method} ${url}`);\n        }\n        if (this.m_RESTClient === null) {\n            if (this.m_Logger) {\n                ( < any > this.m_Logger).err ? ( < any > this.m_Logger).err('RESTFulClient not init.') : ( < any > this.m_Logger).error('RESTFulClient not init.');\n                return null;\n            } else {\n                throw new Error('RESTFulClient not init.');\n            }\n        }\n        let curRequestOp: RequestOption = {};\n        if (qs) {\n            curRequestOp.qs = qs;\n        }\n        if (method.toLowerCase() !== \"get\" && body) {\n            curRequestOp.body = body;\n        }\n        if (formData) {\n            curRequestOp.formData = formData;\n        } else if (form) {\n            curRequestOp.form = form;\n        }\n\n        if (fileName) {\n            curRequestOp.downloadFileName = fileName;\n        }\n\n        return await ( < C4RESTFulClient > this.m_RESTClient).request(url, method.toLowerCase(), curRequestOp).catch((err) => {\n            if (this.m_Logger) {\n                ( < any > this.m_Logger).err ? ( < any > this.m_Logger).err(err) : ( < any > this.m_Logger).error(err);\n                return null;\n            } else {\n                throw err;\n            }\n        });\n    }\n\n    addUsingPUTURL(parameters: {\n        'authorization': string,\n        'req': AppAccountAddDTO,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.getDomain();\n        if (domain === \"\") {\n            if (this.m_Logger) {\n                ( < any > this.m_Logger).err ? ( < any > this.m_Logger).err('Invalid domain.') : ( < any > this.m_Logger).error('Invalid domain.');\n                return \"\";\n            } else {\n                throw new Error('Invalid domain.');\n            }\n        }\n        let path = '/app/account/add';\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * 新增应用账户接口\n     * @method\n     * @name CTest#addUsingPUT\n     * @param {string} authorization - 提供的JWT Token,格式 'Token {TOKEN}'\n     * @param {} req - 入参\n     */\n    async addUsingPUT(parameters: {\n        'authorization': string,\n        'req': AppAccountAddDTO,\n        $downloadFileName: string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.getDomain();\n        if (domain === \"\") {\n            if (this.m_Logger) {\n                ( < any > this.m_Logger).err ? ( < any > this.m_Logger).err('Invalid domain.') : ( < any > this.m_Logger).error('Invalid domain.');\n                return null;\n            } else {\n                throw new Error('Invalid domain.');\n            }\n        }\n        let path = '/app/account/add';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        let formData: any = {};\n        let downloadFileName: string | undefined = undefined;\n\n        downloadFileName = $downloadFileName;\n\n        headers['Accept'] = 'application/json';\n        headers['Content-Type'] = 'application/json,application/xml';\n\n        if (parameters['authorization'] !== undefined) {\n            headers['Authorization'] = parameters['authorization'];\n        }\n\n        if (parameters['authorization'] === undefined) {\n            reject(new Error('Missing required  parameter: authorization'));\n            return;\n        }\n\n        if (parameters['req'] !== undefined) {\n            body = parameters['req'];\n        }\n\n        if (parameters['req'] === undefined) {\n            reject(new Error('Missing required  parameter: req'));\n            return;\n        }\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        return await this.request('PUT', domain + path, headers, queryParameters, body, form, formData, downloadFileName).catch((err) => {\n            if (this.m_Logger) {\n                ( < any > this.m_Logger).err ? ( < any > this.m_Logger).err(err) : ( < any > this.m_Logger).error(err);\n                return null;\n            } else {\n                throw err;\n            }\n        });\n    }\n\n    deleteUsingDELETEURL(parameters: {\n        'authorization': string,\n        'appAccount': string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.getDomain();\n        if (domain === \"\") {\n            if (this.m_Logger) {\n                ( < any > this.m_Logger).err ? ( < any > this.m_Logger).err('Invalid domain.') : ( < any > this.m_Logger).error('Invalid domain.');\n                return \"\";\n            } else {\n                throw new Error('Invalid domain.');\n            }\n        }\n        let path = '/app/account/delete/{app_account}';\n\n        path = path.replace('{app_account}', `${parameters['appAccount']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * 删除应用账户接口\n     * @method\n     * @name CTest#deleteUsingDELETE\n     * @param {string} authorization - 提供的JWT Token,格式 'Token {TOKEN}'\n     * @param {string} appAccount - 应用账户\n     */\n    async deleteUsingDELETE(parameters: {\n        'authorization': string,\n        'appAccount': string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.getDomain();\n        if (domain === \"\") {\n            if (this.m_Logger) {\n                ( < any > this.m_Logger).err ? ( < any > this.m_Logger).err('Invalid domain.') : ( < any > this.m_Logger).error('Invalid domain.');\n                return null;\n            } else {\n                throw new Error('Invalid domain.');\n            }\n        }\n        let path = '/app/account/delete/{app_account}';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        let formData: any = {};\n        let downloadFileName: string | undefined = undefined;\n\n        headers['Accept'] = 'application/json';\n        headers['Content-Type'] = 'application/json';\n\n        if (parameters['authorization'] !== undefined) {\n            headers['Authorization'] = parameters['authorization'];\n        }\n\n        if (parameters['authorization'] === undefined) {\n            reject(new Error('Missing required  parameter: authorization'));\n            return;\n        }\n\n        path = path.replace('{app_account}', `${parameters['appAccount']}`);\n\n        if (parameters['appAccount'] === undefined) {\n            reject(new Error('Missing required  parameter: appAccount'));\n            return;\n        }\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        return await this.request('DELETE', domain + path, headers, queryParameters, body, form, formData, downloadFileName).catch((err) => {\n            if (this.m_Logger) {\n                ( < any > this.m_Logger).err ? ( < any > this.m_Logger).err(err) : ( < any > this.m_Logger).error(err);\n                return null;\n            } else {\n                throw err;\n            }\n        });\n    }\n\n    loginUsingPOSTURL(parameters: {\n        'authorization': string,\n        'req': AppAccountLoginDTO,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.getDomain();\n        if (domain === \"\") {\n            if (this.m_Logger) {\n                ( < any > this.m_Logger).err ? ( < any > this.m_Logger).err('Invalid domain.') : ( < any > this.m_Logger).error('Invalid domain.');\n                return \"\";\n            } else {\n                throw new Error('Invalid domain.');\n            }\n        }\n        let path = '/app/account/login';\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * 应用账户登陆接口\n     * @method\n     * @name CTest#loginUsingPOST\n     * @param {string} authorization - 提供的JWT Token,格式 'Token {TOKEN}'\n     * @param {} req - 入参\n     */\n    async loginUsingPOST(parameters: {\n        'authorization': string,\n        'req': AppAccountLoginDTO,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.getDomain();\n        if (domain === \"\") {\n            if (this.m_Logger) {\n                ( < any > this.m_Logger).err ? ( < any > this.m_Logger).err('Invalid domain.') : ( < any > this.m_Logger).error('Invalid domain.');\n                return null;\n            } else {\n                throw new Error('Invalid domain.');\n            }\n        }\n        let path = '/app/account/login';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        let formData: any = {};\n        let downloadFileName: string | undefined = undefined;\n\n        headers['Accept'] = 'application/json';\n        headers['Content-Type'] = 'application/json';\n\n        if (parameters['authorization'] !== undefined) {\n            headers['Authorization'] = parameters['authorization'];\n        }\n\n        if (parameters['authorization'] === undefined) {\n            reject(new Error('Missing required  parameter: authorization'));\n            return;\n        }\n\n        if (parameters['req'] !== undefined) {\n            body = parameters['req'];\n        }\n\n        if (parameters['req'] === undefined) {\n            reject(new Error('Missing required  parameter: req'));\n            return;\n        }\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        return await this.request('POST', domain + path, headers, queryParameters, body, form, formData, downloadFileName).catch((err) => {\n            if (this.m_Logger) {\n                ( < any > this.m_Logger).err ? ( < any > this.m_Logger).err(err) : ( < any > this.m_Logger).error(err);\n                return null;\n            } else {\n                throw err;\n            }\n        });\n    }\n\n    modifyUsingPOSTURL(parameters: {\n        'authorization': string,\n        'req': AppAccountModifyDTO,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.getDomain();\n        if (domain === \"\") {\n            if (this.m_Logger) {\n                ( < any > this.m_Logger).err ? ( < any > this.m_Logger).err('Invalid domain.') : ( < any > this.m_Logger).error('Invalid domain.');\n                return \"\";\n            } else {\n                throw new Error('Invalid domain.');\n            }\n        }\n        let path = '/app/account/modify';\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * 修改应用账户信息接口\n     * @method\n     * @name CTest#modifyUsingPOST\n     * @param {string} authorization - 提供的JWT Token,格式 'Token {TOKEN}'\n     * @param {} req - 入参\n     */\n    async modifyUsingPOST(parameters: {\n        'authorization': string,\n        'req': AppAccountModifyDTO,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.getDomain();\n        if (domain === \"\") {\n            if (this.m_Logger) {\n                ( < any > this.m_Logger).err ? ( < any > this.m_Logger).err('Invalid domain.') : ( < any > this.m_Logger).error('Invalid domain.');\n                return null;\n            } else {\n                throw new Error('Invalid domain.');\n            }\n        }\n        let path = '/app/account/modify';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        let formData: any = {};\n        let downloadFileName: string | undefined = undefined;\n\n        headers['Accept'] = 'application/json';\n        headers['Content-Type'] = 'application/json';\n\n        if (parameters['authorization'] !== undefined) {\n            headers['Authorization'] = parameters['authorization'];\n        }\n\n        if (parameters['authorization'] === undefined) {\n            reject(new Error('Missing required  parameter: authorization'));\n            return;\n        }\n\n        if (parameters['req'] !== undefined) {\n            body = parameters['req'];\n        }\n\n        if (parameters['req'] === undefined) {\n            reject(new Error('Missing required  parameter: req'));\n            return;\n        }\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        return await this.request('POST', domain + path, headers, queryParameters, body, form, formData, downloadFileName).catch((err) => {\n            if (this.m_Logger) {\n                ( < any > this.m_Logger).err ? ( < any > this.m_Logger).err(err) : ( < any > this.m_Logger).error(err);\n                return null;\n            } else {\n                throw err;\n            }\n        });\n    }\n\n    modifyPassUsingPOSTURL(parameters: {\n        'authorization': string,\n        'req': AppAccountModifyPassDTO,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.getDomain();\n        if (domain === \"\") {\n            if (this.m_Logger) {\n                ( < any > this.m_Logger).err ? ( < any > this.m_Logger).err('Invalid domain.') : ( < any > this.m_Logger).error('Invalid domain.');\n                return \"\";\n            } else {\n                throw new Error('Invalid domain.');\n            }\n        }\n        let path = '/app/account/modify_pass';\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * 修改应用账户密码接口\n     * @method\n     * @name CTest#modifyPassUsingPOST\n     * @param {string} authorization - 提供的JWT Token,格式 'Token {TOKEN}'\n     * @param {} req - 入参\n     */\n    async modifyPassUsingPOST(parameters: {\n        'authorization': string,\n        'req': AppAccountModifyPassDTO,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.getDomain();\n        if (domain === \"\") {\n            if (this.m_Logger) {\n                ( < any > this.m_Logger).err ? ( < any > this.m_Logger).err('Invalid domain.') : ( < any > this.m_Logger).error('Invalid domain.');\n                return null;\n            } else {\n                throw new Error('Invalid domain.');\n            }\n        }\n        let path = '/app/account/modify_pass';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        let formData: any = {};\n        let downloadFileName: string | undefined = undefined;\n\n        headers['Accept'] = 'application/json';\n        headers['Content-Type'] = 'application/json';\n\n        if (parameters['authorization'] !== undefined) {\n            headers['Authorization'] = parameters['authorization'];\n        }\n\n        if (parameters['authorization'] === undefined) {\n            reject(new Error('Missing required  parameter: authorization'));\n            return;\n        }\n\n        if (parameters['req'] !== undefined) {\n            body = parameters['req'];\n        }\n\n        if (parameters['req'] === undefined) {\n            reject(new Error('Missing required  parameter: req'));\n            return;\n        }\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        return await this.request('POST', domain + path, headers, queryParameters, body, form, formData, downloadFileName).catch((err) => {\n            if (this.m_Logger) {\n                ( < any > this.m_Logger).err ? ( < any > this.m_Logger).err(err) : ( < any > this.m_Logger).error(err);\n                return null;\n            } else {\n                throw err;\n            }\n        });\n    }\n\n    searchUsingPOSTURL(parameters: {\n        'authorization': string,\n        'req': PageSearch_AppAccountSearchDTO_,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.getDomain();\n        if (domain === \"\") {\n            if (this.m_Logger) {\n                ( < any > this.m_Logger).err ? ( < any > this.m_Logger).err('Invalid domain.') : ( < any > this.m_Logger).error('Invalid domain.');\n                return \"\";\n            } else {\n                throw new Error('Invalid domain.');\n            }\n        }\n        let path = '/app/account/search';\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * 可排序字段 id,app_no,basic_acc_no,app_account,inserted_dt,updated_dt,name,email\n     * @method\n     * @name CTest#searchUsingPOST\n     * @param {string} authorization - 提供的JWT Token,格式 'Token {TOKEN}'\n     * @param {} req - req\n     */\n    async searchUsingPOST(parameters: {\n        'authorization': string,\n        'req': PageSearch_AppAccountSearchDTO_,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.getDomain();\n        if (domain === \"\") {\n            if (this.m_Logger) {\n                ( < any > this.m_Logger).err ? ( < any > this.m_Logger).err('Invalid domain.') : ( < any > this.m_Logger).error('Invalid domain.');\n                return null;\n            } else {\n                throw new Error('Invalid domain.');\n            }\n        }\n        let path = '/app/account/search';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        let formData: any = {};\n        let downloadFileName: string | undefined = undefined;\n\n        headers['Accept'] = 'application/json';\n        headers['Content-Type'] = 'application/json';\n\n        if (parameters['authorization'] !== undefined) {\n            headers['Authorization'] = parameters['authorization'];\n        }\n\n        if (parameters['authorization'] === undefined) {\n            reject(new Error('Missing required  parameter: authorization'));\n            return;\n        }\n\n        if (parameters['req'] !== undefined) {\n            body = parameters['req'];\n        }\n\n        if (parameters['req'] === undefined) {\n            reject(new Error('Missing required  parameter: req'));\n            return;\n        }\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        return await this.request('POST', domain + path, headers, queryParameters, body, form, formData, downloadFileName).catch((err) => {\n            if (this.m_Logger) {\n                ( < any > this.m_Logger).err ? ( < any > this.m_Logger).err(err) : ( < any > this.m_Logger).error(err);\n                return null;\n            } else {\n                throw err;\n            }\n        });\n    }\n\n    searchOneUsingPOSTURL(parameters: {\n        'authorization': string,\n        'req': AppAccountSearchDTO,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.getDomain();\n        if (domain === \"\") {\n            if (this.m_Logger) {\n                ( < any > this.m_Logger).err ? ( < any > this.m_Logger).err('Invalid domain.') : ( < any > this.m_Logger).error('Invalid domain.');\n                return \"\";\n            } else {\n                throw new Error('Invalid domain.');\n            }\n        }\n        let path = '/app/account/searchone';\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * 查询某个应用账户接口\n     * @method\n     * @name CTest#searchOneUsingPOST\n     * @param {string} authorization - 提供的JWT Token,格式 'Token {TOKEN}'\n     * @param {} req - req\n     */\n    async searchOneUsingPOST(parameters: {\n        'authorization': string,\n        'req': AppAccountSearchDTO,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.getDomain();\n        if (domain === \"\") {\n            if (this.m_Logger) {\n                ( < any > this.m_Logger).err ? ( < any > this.m_Logger).err('Invalid domain.') : ( < any > this.m_Logger).error('Invalid domain.');\n                return null;\n            } else {\n                throw new Error('Invalid domain.');\n            }\n        }\n        let path = '/app/account/searchone';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        let formData: any = {};\n        let downloadFileName: string | undefined = undefined;\n\n        headers['Accept'] = 'application/json';\n        headers['Content-Type'] = 'application/json';\n\n        if (parameters['authorization'] !== undefined) {\n            headers['Authorization'] = parameters['authorization'];\n        }\n\n        if (parameters['authorization'] === undefined) {\n            reject(new Error('Missing required  parameter: authorization'));\n            return;\n        }\n\n        if (parameters['req'] !== undefined) {\n            body = parameters['req'];\n        }\n\n        if (parameters['req'] === undefined) {\n            reject(new Error('Missing required  parameter: req'));\n            return;\n        }\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        return await this.request('POST', domain + path, headers, queryParameters, body, form, formData, downloadFileName).catch((err) => {\n            if (this.m_Logger) {\n                ( < any > this.m_Logger).err ? ( < any > this.m_Logger).err(err) : ( < any > this.m_Logger).error(err);\n                return null;\n            } else {\n                throw err;\n            }\n        });\n    }\n\n    addUsingPUT_1URL(parameters: {\n        'authorization': string,\n        'req': AppRoleAddDTO,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.getDomain();\n        if (domain === \"\") {\n            if (this.m_Logger) {\n                ( < any > this.m_Logger).err ? ( < any > this.m_Logger).err('Invalid domain.') : ( < any > this.m_Logger).error('Invalid domain.');\n                return \"\";\n            } else {\n                throw new Error('Invalid domain.');\n            }\n        }\n        let path = '/app/role/add';\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * 新增应用角色接口\n     * @method\n     * @name CTest#addUsingPUT_1\n     * @param {string} authorization - 提供的JWT Token,格式 'Token {TOKEN}'\n     * @param {} req - 入参\n     */\n    async addUsingPUT_1(parameters: {\n        'authorization': string,\n        'req': AppRoleAddDTO,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.getDomain();\n        if (domain === \"\") {\n            if (this.m_Logger) {\n                ( < any > this.m_Logger).err ? ( < any > this.m_Logger).err('Invalid domain.') : ( < any > this.m_Logger).error('Invalid domain.');\n                return null;\n            } else {\n                throw new Error('Invalid domain.');\n            }\n        }\n        let path = '/app/role/add';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        let formData: any = {};\n        let downloadFileName: string | undefined = undefined;\n\n        headers['Accept'] = 'application/json';\n        headers['Content-Type'] = 'application/json';\n\n        if (parameters['authorization'] !== undefined) {\n            headers['Authorization'] = parameters['authorization'];\n        }\n\n        if (parameters['authorization'] === undefined) {\n            reject(new Error('Missing required  parameter: authorization'));\n            return;\n        }\n\n        if (parameters['req'] !== undefined) {\n            body = parameters['req'];\n        }\n\n        if (parameters['req'] === undefined) {\n            reject(new Error('Missing required  parameter: req'));\n            return;\n        }\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        return await this.request('PUT', domain + path, headers, queryParameters, body, form, formData, downloadFileName).catch((err) => {\n            if (this.m_Logger) {\n                ( < any > this.m_Logger).err ? ( < any > this.m_Logger).err(err) : ( < any > this.m_Logger).error(err);\n                return null;\n            } else {\n                throw err;\n            }\n        });\n    }\n\n    modifyUsingPOST_1URL(parameters: {\n        'authorization': string,\n        'req': AppRoleModofyDTO,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.getDomain();\n        if (domain === \"\") {\n            if (this.m_Logger) {\n                ( < any > this.m_Logger).err ? ( < any > this.m_Logger).err('Invalid domain.') : ( < any > this.m_Logger).error('Invalid domain.');\n                return \"\";\n            } else {\n                throw new Error('Invalid domain.');\n            }\n        }\n        let path = '/app/role/modify';\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * 修改应用角色接口\n     * @method\n     * @name CTest#modifyUsingPOST_1\n     * @param {string} authorization - 提供的JWT Token,格式 'Token {TOKEN}'\n     * @param {} req - 入参\n     */\n    async modifyUsingPOST_1(parameters: {\n        'authorization': string,\n        'req': AppRoleModofyDTO,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.getDomain();\n        if (domain === \"\") {\n            if (this.m_Logger) {\n                ( < any > this.m_Logger).err ? ( < any > this.m_Logger).err('Invalid domain.') : ( < any > this.m_Logger).error('Invalid domain.');\n                return null;\n            } else {\n                throw new Error('Invalid domain.');\n            }\n        }\n        let path = '/app/role/modify';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        let formData: any = {};\n        let downloadFileName: string | undefined = undefined;\n\n        headers['Accept'] = 'application/json';\n        headers['Content-Type'] = 'application/json';\n\n        if (parameters['authorization'] !== undefined) {\n            headers['Authorization'] = parameters['authorization'];\n        }\n\n        if (parameters['authorization'] === undefined) {\n            reject(new Error('Missing required  parameter: authorization'));\n            return;\n        }\n\n        if (parameters['req'] !== undefined) {\n            body = parameters['req'];\n        }\n\n        if (parameters['req'] === undefined) {\n            reject(new Error('Missing required  parameter: req'));\n            return;\n        }\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        return await this.request('POST', domain + path, headers, queryParameters, body, form, formData, downloadFileName).catch((err) => {\n            if (this.m_Logger) {\n                ( < any > this.m_Logger).err ? ( < any > this.m_Logger).err(err) : ( < any > this.m_Logger).error(err);\n                return null;\n            } else {\n                throw err;\n            }\n        });\n    }\n\n    searchUsingPOST_1URL(parameters: {\n        'authorization': string,\n        'req': PageSearch_AppRoleSearchDTO_,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.getDomain();\n        if (domain === \"\") {\n            if (this.m_Logger) {\n                ( < any > this.m_Logger).err ? ( < any > this.m_Logger).err('Invalid domain.') : ( < any > this.m_Logger).error('Invalid domain.');\n                return \"\";\n            } else {\n                throw new Error('Invalid domain.');\n            }\n        }\n        let path = '/app/role/search';\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * 可排序字段 id,role_name;access,is_enable,inserted_dt,updated_dt\n     * @method\n     * @name CTest#searchUsingPOST_1\n     * @param {string} authorization - 提供的JWT Token,格式 'Token {TOKEN}'\n     * @param {} req - req\n     */\n    async searchUsingPOST_1(parameters: {\n        'authorization': string,\n        'req': PageSearch_AppRoleSearchDTO_,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.getDomain();\n        if (domain === \"\") {\n            if (this.m_Logger) {\n                ( < any > this.m_Logger).err ? ( < any > this.m_Logger).err('Invalid domain.') : ( < any > this.m_Logger).error('Invalid domain.');\n                return null;\n            } else {\n                throw new Error('Invalid domain.');\n            }\n        }\n        let path = '/app/role/search';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        let formData: any = {};\n        let downloadFileName: string | undefined = undefined;\n\n        headers['Accept'] = 'application/json';\n        headers['Content-Type'] = 'application/json';\n\n        if (parameters['authorization'] !== undefined) {\n            headers['Authorization'] = parameters['authorization'];\n        }\n\n        if (parameters['authorization'] === undefined) {\n            reject(new Error('Missing required  parameter: authorization'));\n            return;\n        }\n\n        if (parameters['req'] !== undefined) {\n            body = parameters['req'];\n        }\n\n        if (parameters['req'] === undefined) {\n            reject(new Error('Missing required  parameter: req'));\n            return;\n        }\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        return await this.request('POST', domain + path, headers, queryParameters, body, form, formData, downloadFileName).catch((err) => {\n            if (this.m_Logger) {\n                ( < any > this.m_Logger).err ? ( < any > this.m_Logger).err(err) : ( < any > this.m_Logger).error(err);\n                return null;\n            } else {\n                throw err;\n            }\n        });\n    }\n\n    searchByRoleNosUsingGETURL(parameters: {\n        'authorization': string,\n        'roleNos': string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.getDomain();\n        if (domain === \"\") {\n            if (this.m_Logger) {\n                ( < any > this.m_Logger).err ? ( < any > this.m_Logger).err('Invalid domain.') : ( < any > this.m_Logger).error('Invalid domain.');\n                return \"\";\n            } else {\n                throw new Error('Invalid domain.');\n            }\n        }\n        let path = '/app/role/search_by_role_nos/{role_nos}';\n\n        path = path.replace('{role_nos}', `${parameters['roleNos']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * 根据 ;role_no1;role_no2; 形式的字符串查询权限\n     * @method\n     * @name CTest#searchByRoleNosUsingGET\n     * @param {string} authorization - 提供的JWT Token,格式 'Token {TOKEN}'\n     * @param {string} roleNos - role_nos\n     */\n    async searchByRoleNosUsingGET(parameters: {\n        'authorization': string,\n        'roleNos': string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.getDomain();\n        if (domain === \"\") {\n            if (this.m_Logger) {\n                ( < any > this.m_Logger).err ? ( < any > this.m_Logger).err('Invalid domain.') : ( < any > this.m_Logger).error('Invalid domain.');\n                return null;\n            } else {\n                throw new Error('Invalid domain.');\n            }\n        }\n        let path = '/app/role/search_by_role_nos/{role_nos}';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        let formData: any = {};\n        let downloadFileName: string | undefined = undefined;\n\n        headers['Accept'] = 'application/json';\n        headers['Content-Type'] = 'application/json';\n\n        if (parameters['authorization'] !== undefined) {\n            headers['Authorization'] = parameters['authorization'];\n        }\n\n        if (parameters['authorization'] === undefined) {\n            reject(new Error('Missing required  parameter: authorization'));\n            return;\n        }\n\n        path = path.replace('{role_nos}', `${parameters['roleNos']}`);\n\n        if (parameters['roleNos'] === undefined) {\n            reject(new Error('Missing required  parameter: roleNos'));\n            return;\n        }\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        return await this.request('GET', domain + path, headers, queryParameters, body, form, formData, downloadFileName).catch((err) => {\n            if (this.m_Logger) {\n                ( < any > this.m_Logger).err ? ( < any > this.m_Logger).err(err) : ( < any > this.m_Logger).error(err);\n                return null;\n            } else {\n                throw err;\n            }\n        });\n    }\n\n    searchOneUsingPOST_1URL(parameters: {\n        'authorization': string,\n        'req': AppRoleSearchDTO,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.getDomain();\n        if (domain === \"\") {\n            if (this.m_Logger) {\n                ( < any > this.m_Logger).err ? ( < any > this.m_Logger).err('Invalid domain.') : ( < any > this.m_Logger).error('Invalid domain.');\n                return \"\";\n            } else {\n                throw new Error('Invalid domain.');\n            }\n        }\n        let path = '/app/role/searchone';\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * 查询某个应用角色接口\n     * @method\n     * @name CTest#searchOneUsingPOST_1\n     * @param {string} authorization - 提供的JWT Token,格式 'Token {TOKEN}'\n     * @param {} req - req\n     */\n    async searchOneUsingPOST_1(parameters: {\n        'authorization': string,\n        'req': AppRoleSearchDTO,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.getDomain();\n        if (domain === \"\") {\n            if (this.m_Logger) {\n                ( < any > this.m_Logger).err ? ( < any > this.m_Logger).err('Invalid domain.') : ( < any > this.m_Logger).error('Invalid domain.');\n                return null;\n            } else {\n                throw new Error('Invalid domain.');\n            }\n        }\n        let path = '/app/role/searchone';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        let formData: any = {};\n        let downloadFileName: string | undefined = undefined;\n\n        headers['Accept'] = 'application/json';\n        headers['Content-Type'] = 'application/json';\n\n        if (parameters['authorization'] !== undefined) {\n            headers['Authorization'] = parameters['authorization'];\n        }\n\n        if (parameters['authorization'] === undefined) {\n            reject(new Error('Missing required  parameter: authorization'));\n            return;\n        }\n\n        if (parameters['req'] !== undefined) {\n            body = parameters['req'];\n        }\n\n        if (parameters['req'] === undefined) {\n            reject(new Error('Missing required  parameter: req'));\n            return;\n        }\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        return await this.request('POST', domain + path, headers, queryParameters, body, form, formData, downloadFileName).catch((err) => {\n            if (this.m_Logger) {\n                ( < any > this.m_Logger).err ? ( < any > this.m_Logger).err(err) : ( < any > this.m_Logger).error(err);\n                return null;\n            } else {\n                throw err;\n            }\n        });\n    }\n\n    addResourcesUsingPOSTURL(parameters: {\n        'authorization': string,\n        'param': Array < ResourceMatrixDTO >\n            | ResourceMatrixDTO\n\n            ,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.getDomain();\n        if (domain === \"\") {\n            if (this.m_Logger) {\n                ( < any > this.m_Logger).err ? ( < any > this.m_Logger).err('Invalid domain.') : ( < any > this.m_Logger).error('Invalid domain.');\n                return \"\";\n            } else {\n                throw new Error('Invalid domain.');\n            }\n        }\n        let path = '/auth/addResources';\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * 增加资源矩阵\n     * @method\n     * @name CTest#addResourcesUsingPOST\n     * @param {string} authorization - 提供的JWT Token,格式 'Token {TOKEN}'\n     * @param {} param - param\n     */\n    async addResourcesUsingPOST(parameters: {\n        'authorization': string,\n        'param': Array < ResourceMatrixDTO >\n            | ResourceMatrixDTO\n\n            ,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.getDomain();\n        if (domain === \"\") {\n            if (this.m_Logger) {\n                ( < any > this.m_Logger).err ? ( < any > this.m_Logger).err('Invalid domain.') : ( < any > this.m_Logger).error('Invalid domain.');\n                return null;\n            } else {\n                throw new Error('Invalid domain.');\n            }\n        }\n        let path = '/auth/addResources';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        let formData: any = {};\n        let downloadFileName: string | undefined = undefined;\n\n        headers['Accept'] = 'application/json';\n        headers['Content-Type'] = 'application/json';\n\n        if (parameters['authorization'] !== undefined) {\n            headers['Authorization'] = parameters['authorization'];\n        }\n\n        if (parameters['authorization'] === undefined) {\n            reject(new Error('Missing required  parameter: authorization'));\n            return;\n        }\n\n        if (parameters['param'] !== undefined) {\n            body = parameters['param'];\n        }\n\n        if (parameters['param'] === undefined) {\n            reject(new Error('Missing required  parameter: param'));\n            return;\n        }\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        return await this.request('POST', domain + path, headers, queryParameters, body, form, formData, downloadFileName).catch((err) => {\n            if (this.m_Logger) {\n                ( < any > this.m_Logger).err ? ( < any > this.m_Logger).err(err) : ( < any > this.m_Logger).error(err);\n                return null;\n            } else {\n                throw err;\n            }\n        });\n    }\n\n    addRoleMatrixUsingPOSTURL(parameters: {\n        'authorization': string,\n        'param': Array < RoleResourceDTO >\n            | RoleResourceDTO\n\n            ,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.getDomain();\n        if (domain === \"\") {\n            if (this.m_Logger) {\n                ( < any > this.m_Logger).err ? ( < any > this.m_Logger).err('Invalid domain.') : ( < any > this.m_Logger).error('Invalid domain.');\n                return \"\";\n            } else {\n                throw new Error('Invalid domain.');\n            }\n        }\n        let path = '/auth/addRoleMatrix';\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * 增加角色资源矩阵\n     * @method\n     * @name CTest#addRoleMatrixUsingPOST\n     * @param {string} authorization - 提供的JWT Token,格式 'Token {TOKEN}'\n     * @param {} param - param\n     */\n    async addRoleMatrixUsingPOST(parameters: {\n        'authorization': string,\n        'param': Array < RoleResourceDTO >\n            | RoleResourceDTO\n\n            ,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.getDomain();\n        if (domain === \"\") {\n            if (this.m_Logger) {\n                ( < any > this.m_Logger).err ? ( < any > this.m_Logger).err('Invalid domain.') : ( < any > this.m_Logger).error('Invalid domain.');\n                return null;\n            } else {\n                throw new Error('Invalid domain.');\n            }\n        }\n        let path = '/auth/addRoleMatrix';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        let formData: any = {};\n        let downloadFileName: string | undefined = undefined;\n\n        headers['Accept'] = 'application/json';\n        headers['Content-Type'] = 'application/json';\n\n        if (parameters['authorization'] !== undefined) {\n            headers['Authorization'] = parameters['authorization'];\n        }\n\n        if (parameters['authorization'] === undefined) {\n            reject(new Error('Missing required  parameter: authorization'));\n            return;\n        }\n\n        if (parameters['param'] !== undefined) {\n            body = parameters['param'];\n        }\n\n        if (parameters['param'] === undefined) {\n            reject(new Error('Missing required  parameter: param'));\n            return;\n        }\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        return await this.request('POST', domain + path, headers, queryParameters, body, form, formData, downloadFileName).catch((err) => {\n            if (this.m_Logger) {\n                ( < any > this.m_Logger).err ? ( < any > this.m_Logger).err(err) : ( < any > this.m_Logger).error(err);\n                return null;\n            } else {\n                throw err;\n            }\n        });\n    }\n\n    getResourceUsingGETURL(parameters: {\n        'authorization': string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.getDomain();\n        if (domain === \"\") {\n            if (this.m_Logger) {\n                ( < any > this.m_Logger).err ? ( < any > this.m_Logger).err('Invalid domain.') : ( < any > this.m_Logger).error('Invalid domain.');\n                return \"\";\n            } else {\n                throw new Error('Invalid domain.');\n            }\n        }\n        let path = '/auth/getResource';\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * 获取资源矩阵\n     * @method\n     * @name CTest#getResourceUsingGET\n     * @param {string} authorization - 提供的JWT Token,格式 'Token {TOKEN}'\n     */\n    async getResourceUsingGET(parameters: {\n        'authorization': string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.getDomain();\n        if (domain === \"\") {\n            if (this.m_Logger) {\n                ( < any > this.m_Logger).err ? ( < any > this.m_Logger).err('Invalid domain.') : ( < any > this.m_Logger).error('Invalid domain.');\n                return null;\n            } else {\n                throw new Error('Invalid domain.');\n            }\n        }\n        let path = '/auth/getResource';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        let formData: any = {};\n        let downloadFileName: string | undefined = undefined;\n\n        headers['Accept'] = 'application/json';\n        headers['Content-Type'] = 'application/json';\n\n        if (parameters['authorization'] !== undefined) {\n            headers['Authorization'] = parameters['authorization'];\n        }\n\n        if (parameters['authorization'] === undefined) {\n            reject(new Error('Missing required  parameter: authorization'));\n            return;\n        }\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        return await this.request('GET', domain + path, headers, queryParameters, body, form, formData, downloadFileName).catch((err) => {\n            if (this.m_Logger) {\n                ( < any > this.m_Logger).err ? ( < any > this.m_Logger).err(err) : ( < any > this.m_Logger).error(err);\n                return null;\n            } else {\n                throw err;\n            }\n        });\n    }\n\n    getRoleMatrixUsingGETURL(parameters: {\n        'authorization': string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.getDomain();\n        if (domain === \"\") {\n            if (this.m_Logger) {\n                ( < any > this.m_Logger).err ? ( < any > this.m_Logger).err('Invalid domain.') : ( < any > this.m_Logger).error('Invalid domain.');\n                return \"\";\n            } else {\n                throw new Error('Invalid domain.');\n            }\n        }\n        let path = '/auth/getRoleMatrix';\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * 暂时不支持条件查询，默认获取所有\n     * @method\n     * @name CTest#getRoleMatrixUsingGET\n     * @param {string} authorization - 提供的JWT Token,格式 'Token {TOKEN}'\n     */\n    async getRoleMatrixUsingGET(parameters: {\n        'authorization': string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.getDomain();\n        if (domain === \"\") {\n            if (this.m_Logger) {\n                ( < any > this.m_Logger).err ? ( < any > this.m_Logger).err('Invalid domain.') : ( < any > this.m_Logger).error('Invalid domain.');\n                return null;\n            } else {\n                throw new Error('Invalid domain.');\n            }\n        }\n        let path = '/auth/getRoleMatrix';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        let formData: any = {};\n        let downloadFileName: string | undefined = undefined;\n\n        headers['Accept'] = 'application/json';\n        headers['Content-Type'] = 'application/json';\n\n        if (parameters['authorization'] !== undefined) {\n            headers['Authorization'] = parameters['authorization'];\n        }\n\n        if (parameters['authorization'] === undefined) {\n            reject(new Error('Missing required  parameter: authorization'));\n            return;\n        }\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        return await this.request('GET', domain + path, headers, queryParameters, body, form, formData, downloadFileName).catch((err) => {\n            if (this.m_Logger) {\n                ( < any > this.m_Logger).err ? ( < any > this.m_Logger).err(err) : ( < any > this.m_Logger).error(err);\n                return null;\n            } else {\n                throw err;\n            }\n        });\n    }\n\n    getUserRolesUsingGETURL(parameters: {\n        'authorization': string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.getDomain();\n        if (domain === \"\") {\n            if (this.m_Logger) {\n                ( < any > this.m_Logger).err ? ( < any > this.m_Logger).err('Invalid domain.') : ( < any > this.m_Logger).error('Invalid domain.');\n                return \"\";\n            } else {\n                throw new Error('Invalid domain.');\n            }\n        }\n        let path = '/auth/getUserRoles';\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * 获取用户角色信息\n     * @method\n     * @name CTest#getUserRolesUsingGET\n     * @param {string} authorization - 提供的JWT Token,格式 'Token {TOKEN}'\n     */\n    async getUserRolesUsingGET(parameters: {\n        'authorization': string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.getDomain();\n        if (domain === \"\") {\n            if (this.m_Logger) {\n                ( < any > this.m_Logger).err ? ( < any > this.m_Logger).err('Invalid domain.') : ( < any > this.m_Logger).error('Invalid domain.');\n                return null;\n            } else {\n                throw new Error('Invalid domain.');\n            }\n        }\n        let path = '/auth/getUserRoles';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        let formData: any = {};\n        let downloadFileName: string | undefined = undefined;\n\n        headers['Accept'] = 'application/json';\n        headers['Content-Type'] = 'application/json';\n\n        if (parameters['authorization'] !== undefined) {\n            headers['Authorization'] = parameters['authorization'];\n        }\n\n        if (parameters['authorization'] === undefined) {\n            reject(new Error('Missing required  parameter: authorization'));\n            return;\n        }\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        return await this.request('GET', domain + path, headers, queryParameters, body, form, formData, downloadFileName).catch((err) => {\n            if (this.m_Logger) {\n                ( < any > this.m_Logger).err ? ( < any > this.m_Logger).err(err) : ( < any > this.m_Logger).error(err);\n                return null;\n            } else {\n                throw err;\n            }\n        });\n    }\n\n    addUsingPUT_2URL(parameters: {\n        'authorization': string,\n        'req': BasicAccountAddDTO,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.getDomain();\n        if (domain === \"\") {\n            if (this.m_Logger) {\n                ( < any > this.m_Logger).err ? ( < any > this.m_Logger).err('Invalid domain.') : ( < any > this.m_Logger).error('Invalid domain.');\n                return \"\";\n            } else {\n                throw new Error('Invalid domain.');\n            }\n        }\n        let path = '/basic/account/add';\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * 新增基础账户接口\n     * @method\n     * @name CTest#addUsingPUT_2\n     * @param {string} authorization - 提供的JWT Token,格式 'Token {TOKEN}'\n     * @param {} req - 入参\n     */\n    async addUsingPUT_2(parameters: {\n        'authorization': string,\n        'req': BasicAccountAddDTO,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.getDomain();\n        if (domain === \"\") {\n            if (this.m_Logger) {\n                ( < any > this.m_Logger).err ? ( < any > this.m_Logger).err('Invalid domain.') : ( < any > this.m_Logger).error('Invalid domain.');\n                return null;\n            } else {\n                throw new Error('Invalid domain.');\n            }\n        }\n        let path = '/basic/account/add';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        let formData: any = {};\n        let downloadFileName: string | undefined = undefined;\n\n        headers['Accept'] = 'application/json';\n        headers['Content-Type'] = 'application/json';\n\n        if (parameters['authorization'] !== undefined) {\n            headers['Authorization'] = parameters['authorization'];\n        }\n\n        if (parameters['authorization'] === undefined) {\n            reject(new Error('Missing required  parameter: authorization'));\n            return;\n        }\n\n        if (parameters['req'] !== undefined) {\n            body = parameters['req'];\n        }\n\n        if (parameters['req'] === undefined) {\n            reject(new Error('Missing required  parameter: req'));\n            return;\n        }\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        return await this.request('PUT', domain + path, headers, queryParameters, body, form, formData, downloadFileName).catch((err) => {\n            if (this.m_Logger) {\n                ( < any > this.m_Logger).err ? ( < any > this.m_Logger).err(err) : ( < any > this.m_Logger).error(err);\n                return null;\n            } else {\n                throw err;\n            }\n        });\n    }\n\n    getMediaUsingPOSTURL(parameters: {\n        'authorization': string,\n        'req': BasicAccountSearchMediaDTO,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.getDomain();\n        if (domain === \"\") {\n            if (this.m_Logger) {\n                ( < any > this.m_Logger).err ? ( < any > this.m_Logger).err('Invalid domain.') : ( < any > this.m_Logger).error('Invalid domain.');\n                return \"\";\n            } else {\n                throw new Error('Invalid domain.');\n            }\n        }\n        let path = '/basic/account/get_media';\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * 根据基础账户INT编号查询基础账户介质接口\n     * @method\n     * @name CTest#getMediaUsingPOST\n     * @param {string} authorization - 提供的JWT Token,格式 'Token {TOKEN}'\n     * @param {} req - 入参\n     */\n    async getMediaUsingPOST(parameters: {\n        'authorization': string,\n        'req': BasicAccountSearchMediaDTO,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.getDomain();\n        if (domain === \"\") {\n            if (this.m_Logger) {\n                ( < any > this.m_Logger).err ? ( < any > this.m_Logger).err('Invalid domain.') : ( < any > this.m_Logger).error('Invalid domain.');\n                return null;\n            } else {\n                throw new Error('Invalid domain.');\n            }\n        }\n        let path = '/basic/account/get_media';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        let formData: any = {};\n        let downloadFileName: string | undefined = undefined;\n\n        headers['Accept'] = 'application/json';\n        headers['Content-Type'] = 'application/json';\n\n        if (parameters['authorization'] !== undefined) {\n            headers['Authorization'] = parameters['authorization'];\n        }\n\n        if (parameters['authorization'] === undefined) {\n            reject(new Error('Missing required  parameter: authorization'));\n            return;\n        }\n\n        if (parameters['req'] !== undefined) {\n            body = parameters['req'];\n        }\n\n        if (parameters['req'] === undefined) {\n            reject(new Error('Missing required  parameter: req'));\n            return;\n        }\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        return await this.request('POST', domain + path, headers, queryParameters, body, form, formData, downloadFileName).catch((err) => {\n            if (this.m_Logger) {\n                ( < any > this.m_Logger).err ? ( < any > this.m_Logger).err(err) : ( < any > this.m_Logger).error(err);\n                return null;\n            } else {\n                throw err;\n            }\n        });\n    }\n\n    modifyUsingPOST_2URL(parameters: {\n        'authorization': string,\n        'req': BasicAccountModifyDTO,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.getDomain();\n        if (domain === \"\") {\n            if (this.m_Logger) {\n                ( < any > this.m_Logger).err ? ( < any > this.m_Logger).err('Invalid domain.') : ( < any > this.m_Logger).error('Invalid domain.');\n                return \"\";\n            } else {\n                throw new Error('Invalid domain.');\n            }\n        }\n        let path = '/basic/account/modify';\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * 修改基础账户信息接口\n     * @method\n     * @name CTest#modifyUsingPOST_2\n     * @param {string} authorization - 提供的JWT Token,格式 'Token {TOKEN}'\n     * @param {} req - 入参\n     */\n    async modifyUsingPOST_2(parameters: {\n        'authorization': string,\n        'req': BasicAccountModifyDTO,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.getDomain();\n        if (domain === \"\") {\n            if (this.m_Logger) {\n                ( < any > this.m_Logger).err ? ( < any > this.m_Logger).err('Invalid domain.') : ( < any > this.m_Logger).error('Invalid domain.');\n                return null;\n            } else {\n                throw new Error('Invalid domain.');\n            }\n        }\n        let path = '/basic/account/modify';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        let formData: any = {};\n        let downloadFileName: string | undefined = undefined;\n\n        headers['Accept'] = 'application/json';\n        headers['Content-Type'] = 'application/json';\n\n        if (parameters['authorization'] !== undefined) {\n            headers['Authorization'] = parameters['authorization'];\n        }\n\n        if (parameters['authorization'] === undefined) {\n            reject(new Error('Missing required  parameter: authorization'));\n            return;\n        }\n\n        if (parameters['req'] !== undefined) {\n            body = parameters['req'];\n        }\n\n        if (parameters['req'] === undefined) {\n            reject(new Error('Missing required  parameter: req'));\n            return;\n        }\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        return await this.request('POST', domain + path, headers, queryParameters, body, form, formData, downloadFileName).catch((err) => {\n            if (this.m_Logger) {\n                ( < any > this.m_Logger).err ? ( < any > this.m_Logger).err(err) : ( < any > this.m_Logger).error(err);\n                return null;\n            } else {\n                throw err;\n            }\n        });\n    }\n\n    modifyMediaUsingPOSTURL(parameters: {\n        'authorization': string,\n        'req': BasicAccountModifyMediaDTO,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.getDomain();\n        if (domain === \"\") {\n            if (this.m_Logger) {\n                ( < any > this.m_Logger).err ? ( < any > this.m_Logger).err('Invalid domain.') : ( < any > this.m_Logger).error('Invalid domain.');\n                return \"\";\n            } else {\n                throw new Error('Invalid domain.');\n            }\n        }\n        let path = '/basic/account/modify_media';\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * 维护基础账户身份识别介质接口\n     * @method\n     * @name CTest#modifyMediaUsingPOST\n     * @param {string} authorization - 提供的JWT Token,格式 'Token {TOKEN}'\n     * @param {} req - 入参\n     */\n    async modifyMediaUsingPOST(parameters: {\n        'authorization': string,\n        'req': BasicAccountModifyMediaDTO,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.getDomain();\n        if (domain === \"\") {\n            if (this.m_Logger) {\n                ( < any > this.m_Logger).err ? ( < any > this.m_Logger).err('Invalid domain.') : ( < any > this.m_Logger).error('Invalid domain.');\n                return null;\n            } else {\n                throw new Error('Invalid domain.');\n            }\n        }\n        let path = '/basic/account/modify_media';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        let formData: any = {};\n        let downloadFileName: string | undefined = undefined;\n\n        headers['Accept'] = 'application/json';\n        headers['Content-Type'] = 'application/json';\n\n        if (parameters['authorization'] !== undefined) {\n            headers['Authorization'] = parameters['authorization'];\n        }\n\n        if (parameters['authorization'] === undefined) {\n            reject(new Error('Missing required  parameter: authorization'));\n            return;\n        }\n\n        if (parameters['req'] !== undefined) {\n            body = parameters['req'];\n        }\n\n        if (parameters['req'] === undefined) {\n            reject(new Error('Missing required  parameter: req'));\n            return;\n        }\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        return await this.request('POST', domain + path, headers, queryParameters, body, form, formData, downloadFileName).catch((err) => {\n            if (this.m_Logger) {\n                ( < any > this.m_Logger).err ? ( < any > this.m_Logger).err(err) : ( < any > this.m_Logger).error(err);\n                return null;\n            } else {\n                throw err;\n            }\n        });\n    }\n\n    searchByBasicAccNoUsingGETURL(parameters: {\n        'authorization': string,\n        'basicAccNo': string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.getDomain();\n        if (domain === \"\") {\n            if (this.m_Logger) {\n                ( < any > this.m_Logger).err ? ( < any > this.m_Logger).err('Invalid domain.') : ( < any > this.m_Logger).error('Invalid domain.');\n                return \"\";\n            } else {\n                throw new Error('Invalid domain.');\n            }\n        }\n        let path = '/basic/account/searchbybasic_acc_no/{basic_acc_no}';\n\n        path = path.replace('{basic_acc_no}', `${parameters['basicAccNo']}`);\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * 根据基础账户基础档案编号查询基础账户接口\n     * @method\n     * @name CTest#searchByBasicAccNoUsingGET\n     * @param {string} authorization - 提供的JWT Token,格式 'Token {TOKEN}'\n     * @param {string} basicAccNo - 基础账户基础档案编号\n     */\n    async searchByBasicAccNoUsingGET(parameters: {\n        'authorization': string,\n        'basicAccNo': string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.getDomain();\n        if (domain === \"\") {\n            if (this.m_Logger) {\n                ( < any > this.m_Logger).err ? ( < any > this.m_Logger).err('Invalid domain.') : ( < any > this.m_Logger).error('Invalid domain.');\n                return null;\n            } else {\n                throw new Error('Invalid domain.');\n            }\n        }\n        let path = '/basic/account/searchbybasic_acc_no/{basic_acc_no}';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        let formData: any = {};\n        let downloadFileName: string | undefined = undefined;\n\n        headers['Accept'] = 'application/json';\n        headers['Content-Type'] = 'application/json';\n\n        if (parameters['authorization'] !== undefined) {\n            headers['Authorization'] = parameters['authorization'];\n        }\n\n        if (parameters['authorization'] === undefined) {\n            reject(new Error('Missing required  parameter: authorization'));\n            return;\n        }\n\n        path = path.replace('{basic_acc_no}', `${parameters['basicAccNo']}`);\n\n        if (parameters['basicAccNo'] === undefined) {\n            reject(new Error('Missing required  parameter: basicAccNo'));\n            return;\n        }\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        return await this.request('GET', domain + path, headers, queryParameters, body, form, formData, downloadFileName).catch((err) => {\n            if (this.m_Logger) {\n                ( < any > this.m_Logger).err ? ( < any > this.m_Logger).err(err) : ( < any > this.m_Logger).error(err);\n                return null;\n            } else {\n                throw err;\n            }\n        });\n    }\n\n    registeredEventUsingGETURL(parameters: {\n        'authorization': string,\n        'id' ? : string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.getDomain();\n        if (domain === \"\") {\n            if (this.m_Logger) {\n                ( < any > this.m_Logger).err ? ( < any > this.m_Logger).err('Invalid domain.') : ( < any > this.m_Logger).error('Invalid domain.');\n                return \"\";\n            } else {\n                throw new Error('Invalid domain.');\n            }\n        }\n        let path = '/event/callback/register';\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * registeredEvent\n     * @method\n     * @name CTest#registeredEventUsingGET\n     * @param {string} authorization - 提供的JWT Token,格式 'Token {TOKEN}'\n     * @param {} id - id\n     */\n    async registeredEventUsingGET(parameters: {\n        'authorization': string,\n        'id' ? : string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.getDomain();\n        if (domain === \"\") {\n            if (this.m_Logger) {\n                ( < any > this.m_Logger).err ? ( < any > this.m_Logger).err('Invalid domain.') : ( < any > this.m_Logger).error('Invalid domain.');\n                return null;\n            } else {\n                throw new Error('Invalid domain.');\n            }\n        }\n        let path = '/event/callback/register';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        let formData: any = {};\n        let downloadFileName: string | undefined = undefined;\n\n        headers['Accept'] = '*/*';\n        headers['Content-Type'] = 'application/json';\n\n        if (parameters['authorization'] !== undefined) {\n            headers['Authorization'] = parameters['authorization'];\n        }\n\n        if (parameters['authorization'] === undefined) {\n            reject(new Error('Missing required  parameter: authorization'));\n            return;\n        }\n\n        if (parameters['id'] !== undefined) {\n            body = parameters['id'];\n        }\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        return await this.request('GET', domain + path, headers, queryParameters, body, form, formData, downloadFileName).catch((err) => {\n            if (this.m_Logger) {\n                ( < any > this.m_Logger).err ? ( < any > this.m_Logger).err(err) : ( < any > this.m_Logger).error(err);\n                return null;\n            } else {\n                throw err;\n            }\n        });\n    }\n\n    registeredEventUsingHEADURL(parameters: {\n        'authorization': string,\n        'id' ? : string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.getDomain();\n        if (domain === \"\") {\n            if (this.m_Logger) {\n                ( < any > this.m_Logger).err ? ( < any > this.m_Logger).err('Invalid domain.') : ( < any > this.m_Logger).error('Invalid domain.');\n                return \"\";\n            } else {\n                throw new Error('Invalid domain.');\n            }\n        }\n        let path = '/event/callback/register';\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * registeredEvent\n     * @method\n     * @name CTest#registeredEventUsingHEAD\n     * @param {string} authorization - 提供的JWT Token,格式 'Token {TOKEN}'\n     * @param {} id - id\n     */\n    async registeredEventUsingHEAD(parameters: {\n        'authorization': string,\n        'id' ? : string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.getDomain();\n        if (domain === \"\") {\n            if (this.m_Logger) {\n                ( < any > this.m_Logger).err ? ( < any > this.m_Logger).err('Invalid domain.') : ( < any > this.m_Logger).error('Invalid domain.');\n                return null;\n            } else {\n                throw new Error('Invalid domain.');\n            }\n        }\n        let path = '/event/callback/register';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        let formData: any = {};\n        let downloadFileName: string | undefined = undefined;\n\n        headers['Accept'] = '*/*';\n        headers['Content-Type'] = 'application/json';\n\n        if (parameters['authorization'] !== undefined) {\n            headers['Authorization'] = parameters['authorization'];\n        }\n\n        if (parameters['authorization'] === undefined) {\n            reject(new Error('Missing required  parameter: authorization'));\n            return;\n        }\n\n        if (parameters['id'] !== undefined) {\n            body = parameters['id'];\n        }\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        return await this.request('HEAD', domain + path, headers, queryParameters, body, form, formData, downloadFileName).catch((err) => {\n            if (this.m_Logger) {\n                ( < any > this.m_Logger).err ? ( < any > this.m_Logger).err(err) : ( < any > this.m_Logger).error(err);\n                return null;\n            } else {\n                throw err;\n            }\n        });\n    }\n\n    registeredEventUsingPOSTURL(parameters: {\n        'authorization': string,\n        'id' ? : string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.getDomain();\n        if (domain === \"\") {\n            if (this.m_Logger) {\n                ( < any > this.m_Logger).err ? ( < any > this.m_Logger).err('Invalid domain.') : ( < any > this.m_Logger).error('Invalid domain.');\n                return \"\";\n            } else {\n                throw new Error('Invalid domain.');\n            }\n        }\n        let path = '/event/callback/register';\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * registeredEvent\n     * @method\n     * @name CTest#registeredEventUsingPOST\n     * @param {string} authorization - 提供的JWT Token,格式 'Token {TOKEN}'\n     * @param {} id - id\n     */\n    async registeredEventUsingPOST(parameters: {\n        'authorization': string,\n        'id' ? : string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.getDomain();\n        if (domain === \"\") {\n            if (this.m_Logger) {\n                ( < any > this.m_Logger).err ? ( < any > this.m_Logger).err('Invalid domain.') : ( < any > this.m_Logger).error('Invalid domain.');\n                return null;\n            } else {\n                throw new Error('Invalid domain.');\n            }\n        }\n        let path = '/event/callback/register';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        let formData: any = {};\n        let downloadFileName: string | undefined = undefined;\n\n        headers['Accept'] = '*/*';\n        headers['Content-Type'] = 'application/json';\n\n        if (parameters['authorization'] !== undefined) {\n            headers['Authorization'] = parameters['authorization'];\n        }\n\n        if (parameters['authorization'] === undefined) {\n            reject(new Error('Missing required  parameter: authorization'));\n            return;\n        }\n\n        if (parameters['id'] !== undefined) {\n            body = parameters['id'];\n        }\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        return await this.request('POST', domain + path, headers, queryParameters, body, form, formData, downloadFileName).catch((err) => {\n            if (this.m_Logger) {\n                ( < any > this.m_Logger).err ? ( < any > this.m_Logger).err(err) : ( < any > this.m_Logger).error(err);\n                return null;\n            } else {\n                throw err;\n            }\n        });\n    }\n\n    registeredEventUsingPUTURL(parameters: {\n        'authorization': string,\n        'id' ? : string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.getDomain();\n        if (domain === \"\") {\n            if (this.m_Logger) {\n                ( < any > this.m_Logger).err ? ( < any > this.m_Logger).err('Invalid domain.') : ( < any > this.m_Logger).error('Invalid domain.');\n                return \"\";\n            } else {\n                throw new Error('Invalid domain.');\n            }\n        }\n        let path = '/event/callback/register';\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * registeredEvent\n     * @method\n     * @name CTest#registeredEventUsingPUT\n     * @param {string} authorization - 提供的JWT Token,格式 'Token {TOKEN}'\n     * @param {} id - id\n     */\n    async registeredEventUsingPUT(parameters: {\n        'authorization': string,\n        'id' ? : string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.getDomain();\n        if (domain === \"\") {\n            if (this.m_Logger) {\n                ( < any > this.m_Logger).err ? ( < any > this.m_Logger).err('Invalid domain.') : ( < any > this.m_Logger).error('Invalid domain.');\n                return null;\n            } else {\n                throw new Error('Invalid domain.');\n            }\n        }\n        let path = '/event/callback/register';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        let formData: any = {};\n        let downloadFileName: string | undefined = undefined;\n\n        headers['Accept'] = '*/*';\n        headers['Content-Type'] = 'application/json';\n\n        if (parameters['authorization'] !== undefined) {\n            headers['Authorization'] = parameters['authorization'];\n        }\n\n        if (parameters['authorization'] === undefined) {\n            reject(new Error('Missing required  parameter: authorization'));\n            return;\n        }\n\n        if (parameters['id'] !== undefined) {\n            body = parameters['id'];\n        }\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        return await this.request('PUT', domain + path, headers, queryParameters, body, form, formData, downloadFileName).catch((err) => {\n            if (this.m_Logger) {\n                ( < any > this.m_Logger).err ? ( < any > this.m_Logger).err(err) : ( < any > this.m_Logger).error(err);\n                return null;\n            } else {\n                throw err;\n            }\n        });\n    }\n\n    registeredEventUsingDELETEURL(parameters: {\n        'authorization': string,\n        'id' ? : string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.getDomain();\n        if (domain === \"\") {\n            if (this.m_Logger) {\n                ( < any > this.m_Logger).err ? ( < any > this.m_Logger).err('Invalid domain.') : ( < any > this.m_Logger).error('Invalid domain.');\n                return \"\";\n            } else {\n                throw new Error('Invalid domain.');\n            }\n        }\n        let path = '/event/callback/register';\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * registeredEvent\n     * @method\n     * @name CTest#registeredEventUsingDELETE\n     * @param {string} authorization - 提供的JWT Token,格式 'Token {TOKEN}'\n     * @param {} id - id\n     */\n    async registeredEventUsingDELETE(parameters: {\n        'authorization': string,\n        'id' ? : string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.getDomain();\n        if (domain === \"\") {\n            if (this.m_Logger) {\n                ( < any > this.m_Logger).err ? ( < any > this.m_Logger).err('Invalid domain.') : ( < any > this.m_Logger).error('Invalid domain.');\n                return null;\n            } else {\n                throw new Error('Invalid domain.');\n            }\n        }\n        let path = '/event/callback/register';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        let formData: any = {};\n        let downloadFileName: string | undefined = undefined;\n\n        headers['Accept'] = '*/*';\n        headers['Content-Type'] = 'application/json';\n\n        if (parameters['authorization'] !== undefined) {\n            headers['Authorization'] = parameters['authorization'];\n        }\n\n        if (parameters['authorization'] === undefined) {\n            reject(new Error('Missing required  parameter: authorization'));\n            return;\n        }\n\n        if (parameters['id'] !== undefined) {\n            body = parameters['id'];\n        }\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        return await this.request('DELETE', domain + path, headers, queryParameters, body, form, formData, downloadFileName).catch((err) => {\n            if (this.m_Logger) {\n                ( < any > this.m_Logger).err ? ( < any > this.m_Logger).err(err) : ( < any > this.m_Logger).error(err);\n                return null;\n            } else {\n                throw err;\n            }\n        });\n    }\n\n    registeredEventUsingOPTIONSURL(parameters: {\n        'authorization': string,\n        'id' ? : string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.getDomain();\n        if (domain === \"\") {\n            if (this.m_Logger) {\n                ( < any > this.m_Logger).err ? ( < any > this.m_Logger).err('Invalid domain.') : ( < any > this.m_Logger).error('Invalid domain.');\n                return \"\";\n            } else {\n                throw new Error('Invalid domain.');\n            }\n        }\n        let path = '/event/callback/register';\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * registeredEvent\n     * @method\n     * @name CTest#registeredEventUsingOPTIONS\n     * @param {string} authorization - 提供的JWT Token,格式 'Token {TOKEN}'\n     * @param {} id - id\n     */\n    async registeredEventUsingOPTIONS(parameters: {\n        'authorization': string,\n        'id' ? : string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.getDomain();\n        if (domain === \"\") {\n            if (this.m_Logger) {\n                ( < any > this.m_Logger).err ? ( < any > this.m_Logger).err('Invalid domain.') : ( < any > this.m_Logger).error('Invalid domain.');\n                return null;\n            } else {\n                throw new Error('Invalid domain.');\n            }\n        }\n        let path = '/event/callback/register';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        let formData: any = {};\n        let downloadFileName: string | undefined = undefined;\n\n        headers['Accept'] = '*/*';\n        headers['Content-Type'] = 'application/json';\n\n        if (parameters['authorization'] !== undefined) {\n            headers['Authorization'] = parameters['authorization'];\n        }\n\n        if (parameters['authorization'] === undefined) {\n            reject(new Error('Missing required  parameter: authorization'));\n            return;\n        }\n\n        if (parameters['id'] !== undefined) {\n            body = parameters['id'];\n        }\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        return await this.request('OPTIONS', domain + path, headers, queryParameters, body, form, formData, downloadFileName).catch((err) => {\n            if (this.m_Logger) {\n                ( < any > this.m_Logger).err ? ( < any > this.m_Logger).err(err) : ( < any > this.m_Logger).error(err);\n                return null;\n            } else {\n                throw err;\n            }\n        });\n    }\n\n    registeredEventUsingPATCHURL(parameters: {\n        'authorization': string,\n        'id' ? : string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.getDomain();\n        if (domain === \"\") {\n            if (this.m_Logger) {\n                ( < any > this.m_Logger).err ? ( < any > this.m_Logger).err('Invalid domain.') : ( < any > this.m_Logger).error('Invalid domain.');\n                return \"\";\n            } else {\n                throw new Error('Invalid domain.');\n            }\n        }\n        let path = '/event/callback/register';\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * registeredEvent\n     * @method\n     * @name CTest#registeredEventUsingPATCH\n     * @param {string} authorization - 提供的JWT Token,格式 'Token {TOKEN}'\n     * @param {} id - id\n     */\n    async registeredEventUsingPATCH(parameters: {\n        'authorization': string,\n        'id' ? : string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.getDomain();\n        if (domain === \"\") {\n            if (this.m_Logger) {\n                ( < any > this.m_Logger).err ? ( < any > this.m_Logger).err('Invalid domain.') : ( < any > this.m_Logger).error('Invalid domain.');\n                return null;\n            } else {\n                throw new Error('Invalid domain.');\n            }\n        }\n        let path = '/event/callback/register';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        let formData: any = {};\n        let downloadFileName: string | undefined = undefined;\n\n        headers['Accept'] = '*/*';\n        headers['Content-Type'] = 'application/json';\n\n        if (parameters['authorization'] !== undefined) {\n            headers['Authorization'] = parameters['authorization'];\n        }\n\n        if (parameters['authorization'] === undefined) {\n            reject(new Error('Missing required  parameter: authorization'));\n            return;\n        }\n\n        if (parameters['id'] !== undefined) {\n            body = parameters['id'];\n        }\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        return await this.request('PATCH', domain + path, headers, queryParameters, body, form, formData, downloadFileName).catch((err) => {\n            if (this.m_Logger) {\n                ( < any > this.m_Logger).err ? ( < any > this.m_Logger).err(err) : ( < any > this.m_Logger).error(err);\n                return null;\n            } else {\n                throw err;\n            }\n        });\n    }\n\n    specUsingGETURL(parameters: {\n        'authorization': string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): string {\n        let queryParameters: any = {};\n        const domain = parameters.$domain ? parameters.$domain : this.getDomain();\n        if (domain === \"\") {\n            if (this.m_Logger) {\n                ( < any > this.m_Logger).err ? ( < any > this.m_Logger).err('Invalid domain.') : ( < any > this.m_Logger).error('Invalid domain.');\n                return \"\";\n            } else {\n                throw new Error('Invalid domain.');\n            }\n        }\n        let path = '/spec';\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        let keys = Object.keys(queryParameters);\n        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');\n    }\n\n    /**\n     * spec\n     * @method\n     * @name CTest#specUsingGET\n     * @param {string} authorization - 提供的JWT Token,格式 'Token {TOKEN}'\n     */\n    async specUsingGET(parameters: {\n        'authorization': string,\n        $queryParameters ? : any,\n        $domain ? : string\n    }): Promise < request.Response > {\n        const domain = parameters.$domain ? parameters.$domain : this.getDomain();\n        if (domain === \"\") {\n            if (this.m_Logger) {\n                ( < any > this.m_Logger).err ? ( < any > this.m_Logger).err('Invalid domain.') : ( < any > this.m_Logger).error('Invalid domain.');\n                return null;\n            } else {\n                throw new Error('Invalid domain.');\n            }\n        }\n        let path = '/spec';\n        let body: any;\n        let queryParameters: any = {};\n        let headers: any = {};\n        let form: any = {};\n        let formData: any = {};\n        let downloadFileName: string | undefined = undefined;\n\n        headers['Accept'] = '*/*';\n        headers['Content-Type'] = 'application/json';\n\n        if (parameters['authorization'] !== undefined) {\n            headers['Authorization'] = parameters['authorization'];\n        }\n\n        if (parameters['authorization'] === undefined) {\n            reject(new Error('Missing required  parameter: authorization'));\n            return;\n        }\n\n        if (parameters.$queryParameters) {\n            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {\n                queryParameters[parameterName] = parameters.$queryParameters[parameterName];\n            });\n        }\n\n        return await this.request('GET', domain + path, headers, queryParameters, body, form, formData, downloadFileName).catch((err) => {\n            if (this.m_Logger) {\n                ( < any > this.m_Logger).err ? ( < any > this.m_Logger).err(err) : ( < any > this.m_Logger).error(err);\n                return null;\n            } else {\n                throw err;\n            }\n        });\n    }\n\n}"