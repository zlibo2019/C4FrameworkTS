{"version":3,"file":"C4Log2RedisTransport.js","sourceRoot":"","sources":["../src/C4Log2RedisTransport.ts"],"names":[],"mappings":"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","sourcesContent":["import Winston          = require('winston');\nimport WinstonRedis     = require('winston-redis');\nimport IORedis          = require('ioredis');\nimport C4LogLevel       = require('./C4LogLevels');\nimport C4LoggerOptions  = require('./C4LoggerOptions');\n\nimport C4LogTransportInstance from './C4LogTransportInstance';\n\nexport class C4Log2RedisTransport implements C4LogTransportInstance {\n    private m_transport : Winston.TransportInstance | null;\n    private m_RClient   : IORedis.Redis | null;\n\n    constructor() {\n        this.m_transport    = null;\n        this.m_RClient      = null;\n    }\n\n    async init(LogConfig : C4LoggerOptions.RedisLoggerOptions) {\n        let CurRedisClient  : IORedis.Redis;\n        // let Self : C4Log2RedisTransport = this;\n        if (!(LogConfig.redis instanceof IORedis)) {\n            CurRedisClient  = new IORedis(\n                LogConfig.port,\n                LogConfig.host,\n                {\n                    family          : 4,\n                    connectionName  : 'C4Log2Redis',\n                    db              : 0,\n                    password        : LogConfig.auth,\n                    retryStrategy   : function(times : number) : number | false {\n                        if (times > 5) {\n                            return false;\n                        }\n\n                        return Math.min(times * 1000, 30000);\n                    },\n                    reconnectOnError : function(err : Error) : boolean {\n                        let TargetError = 'READONLY';\n                        if (err.message.slice(0, TargetError.length) === TargetError) {\n                            return true;\n                        }\n                        return false;\n                    }\n                }\n            );\n            await new Promise((resolve, reject) => {\n                CurRedisClient.on('ready', () => {\n                    resolve();\n                });\n\n                CurRedisClient.on('error', (err) => {\n                    console.log(JSON.stringify(err));\n                    reject();\n                });\n            });\n\n            this.m_RClient  = CurRedisClient;\n        } else {\n            CurRedisClient  = LogConfig.redis;\n        }\n\n        this.m_transport    = new WinstonRedis.Redis({\n            name        : LogConfig.name,\n            label       : LogConfig.label || LogConfig.name,\n            redis       : CurRedisClient,\n            container   : LogConfig.container,\n            length      : LogConfig.length,\n            channel     : LogConfig.channel,\n            pattern     : LogConfig.pattern,\n            level       : LogConfig.level || 'info'\n        });\n    }\n\n    changeLevel(Level : C4LogLevel.C4LogLevel) : void {\n        if (null !== this.m_transport) {\n            this,this.m_transport.level = Level;\n        }\n    }\n\n    async close() {\n        if (null === this.m_transport\n            || null === this.m_RClient) {\n            return;\n        }\n\n        this.m_RClient.disconnect();\n        let Self = this;\n        await new Promise((resolve) => {\n            if (Self.m_RClient !== null) {\n                Self.m_RClient.on('close', () => {\n                    Self.m_RClient = null;\n                    resolve();\n                });\n            } else {\n                resolve();\n            }\n        });\n    }\n\n    getName() : string {\n        if (null !== this.m_transport) {\n            return this.m_transport.name;\n        }\n\n        return '';\n    }\n\n    getTransport() {\n        return this.m_transport;\n    }\n}\n"]}