{"version":3,"file":"default-console-logger-test.js","sourceRoot":"","sources":["../../src/test/default-console-logger-test.ts"],"names":[],"mappings":"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","sourcesContent":["import C4Logger     = require('../C4Logger');\r\nimport Should       = require('should');\r\nimport Intercept    = require('intercept-stdout');\r\nimport Yaml         = require('js-yaml');\r\nimport Path         = require('path');\r\nimport FS           = require('fs');\r\nimport FSEx         = require('fs-extra');\r\nimport Redis        = require('ioredis');\r\nimport 'mocha'\r\n\r\nasync function Connect2Redis(host: string, port: number, auth: string | null) {\r\n    let CurClient = new Redis(\r\n        port,\r\n        host,\r\n        {\r\n            family          : 4,\r\n            connectionName  : 'C4LoggerTest',\r\n            password        : auth\r\n        }\r\n    )\r\n\r\n    await new Promise((resolve, reject) => {\r\n        CurClient.on('ready', () => {\r\n            resolve();\r\n        });\r\n\r\n        CurClient.on('error', (err) => {\r\n            reject(err);\r\n        });\r\n    }).catch((err) => {\r\n        console.log(err);\r\n        CurClient = null;\r\n    });\r\n    return CurClient;\r\n}\r\n\r\ndescribe('默认类型Logger测试', () => {\r\n    process.setMaxListeners(0);\r\n    it('fatal level', (done) => {\r\n        (async () => {\r\n            let CapturedText : string = \"\";\r\n            let doc = null;\r\n            try {\r\n                doc = Yaml.safeLoad(FS.readFileSync('./src/test/config/DefaultLoggerTestConfig-fatal.yml', 'utf8'));\r\n            } catch (error) {\r\n                Should.throws(error);\r\n            }\r\n            // 清理上次的输出结果\r\n            let LogFileAbPath = Path.join(process.cwd(), doc.defaultLoggers[1].filename)\r\n            try {\r\n                let LastState = FS.statSync(LogFileAbPath);\r\n                if (LastState.isFile()) {\r\n                    FS.unlinkSync(LogFileAbPath);\r\n                } else {\r\n                    FSEx.removeSync(LogFileAbPath);\r\n                }\r\n            } catch (error) {\r\n                // console.log(error)\r\n            }\r\n\r\n            // 读取redis，验证写入内容\r\n            let CurClient = await Connect2Redis(\r\n                doc.defaultLoggers[2].host,\r\n                doc.defaultLoggers[2].port,\r\n                doc.defaultLoggers[2].auth\r\n            );\r\n\r\n            Should.notEqual(CurClient, null);\r\n            CurClient.del(doc.defaultLoggers[2].container);\r\n\r\n            let CurLogger = new C4Logger.C4Logger();\r\n            await CurLogger.init(doc);\r\n\r\n            // 开始捕获标准输出\r\n            let UnhookIntercept = Intercept((text) => {\r\n                CapturedText += text;\r\n            }, (err) => {\r\n                CapturedText += err;\r\n            });\r\n\r\n            CurLogger.fatal('test fatal.');\r\n            UnhookIntercept();\r\n            // 验证Console类型Logger\r\n            CapturedText.should.match(/\\[\\d+-\\d+-\\d+T\\d+:\\d+:\\d+\\.\\d+Z\\]\\s+\\[FATAL\\]\\s+console-logger\\s+-\\s+test fatal./);\r\n\r\n            // 验证Files类型Logger\r\n            // 等一下，有可能文件还没有写入\r\n            await new Promise((resolve, reject) => {\r\n                setTimeout(() => {\r\n                    let CurState = null;\r\n                    let FileContent = null;\r\n                    try {\r\n                        // 日志文件是否存在\r\n                        CurState = FS.statSync(LogFileAbPath);\r\n                        let isFile = CurState.isFile();\r\n                        isFile.should.be.ok();\r\n\r\n                        // 读取日志文件内容\r\n                        FileContent = FS.readFileSync(LogFileAbPath, { encoding : 'utf8'});\r\n                        // 判断内容\r\n                        FileContent.should.match(/\\[\\d+-\\d+-\\d+T\\d+:\\d+:\\d+\\.\\d+Z\\]\\s+\\[FATAL\\]\\s+files-logger\\s+-\\s+test fatal./);\r\n                    } catch (error) {\r\n                        console.log(error);\r\n                        CurState    = null;\r\n                        FileContent = null;\r\n                    }\r\n                    Should.notEqual(CurState, null);\r\n                    Should.notEqual(FileContent, null);\r\n\r\n                    resolve();\r\n                }, 1000);\r\n            });\r\n\r\n            let CurMsg = await CurClient.rpop(doc.defaultLoggers[2].container);\r\n            CurClient.disconnect();\r\n            await new Promise((resolve, reject) => {\r\n                CurClient.on('close', () => {\r\n                    resolve();\r\n                });\r\n            });\r\n\r\n            Should.notEqual(CurMsg, null);\r\n            let CurMsgObj = JSON.parse(CurMsg);\r\n            CurMsgObj.message.should.equal('test fatal.');\r\n\r\n            await CurLogger.close();\r\n            done();\r\n        })();\r\n    });\r\n\r\n    it('err level', (done) => {\r\n        (async () => {\r\n            let CapturedText : string = \"\";\r\n            let doc = null;\r\n            try {\r\n                doc = Yaml.safeLoad(FS.readFileSync('./src/test/config/DefaultLoggerTestConfig-err.yml', 'utf8'));\r\n            } catch (error) {\r\n                Should.throws(error);\r\n            }\r\n            // 清理上次的输出结果\r\n            let LogFileAbPath = Path.join(process.cwd(), doc.defaultLoggers[1].filename)\r\n            try {\r\n                let LastState = FS.statSync(LogFileAbPath);\r\n                if (LastState.isFile()) {\r\n                    FS.unlinkSync(LogFileAbPath);\r\n                } else {\r\n                    FSEx.removeSync(LogFileAbPath);\r\n                }\r\n            } catch (error) {\r\n                // console.log(error)\r\n            }\r\n            \r\n            // 读取redis，验证写入内容\r\n            let CurClient = await Connect2Redis(\r\n                doc.defaultLoggers[2].host,\r\n                doc.defaultLoggers[2].port,\r\n                doc.defaultLoggers[2].auth\r\n            );\r\n\r\n            Should.notEqual(CurClient, null);\r\n            CurClient.del(doc.defaultLoggers[2].container);\r\n\r\n            let CurLogger = new C4Logger.C4Logger();\r\n            await CurLogger.init(doc);\r\n\r\n            // 开始捕获标准输出\r\n            let UnhookIntercept = Intercept((text) => {\r\n                CapturedText += text;\r\n            }, (err) => {});\r\n\r\n            CurLogger.err('test err.');\r\n            UnhookIntercept();\r\n            // 验证Console类型Logger\r\n            CapturedText.should.match(/\\[\\d+-\\d+-\\d+T\\d+:\\d+:\\d+\\.\\d+Z\\]\\s+\\[ERR\\]\\s+console-logger\\s+-\\s+test err./);\r\n\r\n            // 验证Files类型Logger\r\n            // 等一下，有可能文件还没有写入\r\n            await new Promise((resolve, reject) => {\r\n                setTimeout(() => {\r\n                    let CurState = null;\r\n                    let FileContent = null;\r\n                    try {\r\n                        // 日志文件是否存在\r\n                        CurState = FS.statSync(LogFileAbPath);\r\n                        let isFile = CurState.isFile();\r\n                        isFile.should.be.ok();\r\n\r\n                        // 读取日志文件内容\r\n                        FileContent = FS.readFileSync(LogFileAbPath, { encoding : 'utf8'});\r\n                        // 判断内容\r\n                        FileContent.should.match(/\\[\\d+-\\d+-\\d+T\\d+:\\d+:\\d+\\.\\d+Z\\]\\s+\\[ERR\\]\\s+files-logger\\s+-\\s+test err./);\r\n                    } catch (error) {\r\n                        console.log(error);\r\n                        CurState    = null;\r\n                        FileContent = null;\r\n                    }\r\n                    Should.notEqual(CurState, null);\r\n                    Should.notEqual(FileContent, null);\r\n\r\n                    resolve();\r\n                }, 1000);\r\n            });\r\n\r\n            let CurMsg = await CurClient.rpop(doc.defaultLoggers[2].container);\r\n            CurClient.disconnect();\r\n            await new Promise((resolve, reject) => {\r\n                CurClient.on('close', () => {\r\n                    resolve();\r\n                });\r\n            });\r\n\r\n            Should.notEqual(CurMsg, null);\r\n            let CurMsgObj = JSON.parse(CurMsg);\r\n            CurMsgObj.message.should.equal('test err.');\r\n\r\n            await CurLogger.close();\r\n            done();\r\n        })();\r\n    });\r\n\r\n    it('warn level', (done) => {\r\n        (async () => {\r\n            let CapturedText : string = \"\";\r\n            let doc = null;\r\n            try {\r\n                doc = Yaml.safeLoad(FS.readFileSync('./src/test/config/DefaultLoggerTestConfig-warn.yml', 'utf8'));\r\n            } catch (error) {\r\n                Should.throws(error);\r\n            }\r\n\r\n            // 清理上次的输出结果\r\n            let LogFileAbPath = Path.join(process.cwd(), doc.defaultLoggers[1].filename)\r\n            try {\r\n                let LastState = FS.statSync(LogFileAbPath);\r\n                if (LastState.isFile()) {\r\n                    FS.unlinkSync(LogFileAbPath);\r\n                } else {\r\n                    FSEx.removeSync(LogFileAbPath);\r\n                }\r\n            } catch (error) {\r\n                // console.log(error)\r\n            }\r\n            \r\n            // 读取redis，验证写入内容\r\n            let CurClient = await Connect2Redis(\r\n                doc.defaultLoggers[2].host,\r\n                doc.defaultLoggers[2].port,\r\n                doc.defaultLoggers[2].auth\r\n            );\r\n\r\n            Should.notEqual(CurClient, null);\r\n            CurClient.del(doc.defaultLoggers[2].container);\r\n\r\n            let CurLogger = new C4Logger.C4Logger();\r\n            await CurLogger.init(doc);\r\n\r\n            // 开始捕获标准输出\r\n            let UnhookIntercept = Intercept((text) => {\r\n                CapturedText += text;\r\n            }, (err) => {});\r\n\r\n            CurLogger.warn('test warn.');\r\n            UnhookIntercept();\r\n            // 验证Console类型Logger\r\n            CapturedText.should.match(/\\[\\d+-\\d+-\\d+T\\d+:\\d+:\\d+\\.\\d+Z\\]\\s+\\[WARN\\]\\s+console-logger\\s+-\\s+test warn./);\r\n\r\n            // 验证Files类型Logger\r\n            // 等一下，有可能文件还没有写入\r\n            await new Promise((resolve, reject) => {\r\n                setTimeout(() => {\r\n                    let CurState = null;\r\n                    let FileContent = null;\r\n                    try {\r\n                        // 日志文件是否存在\r\n                        CurState = FS.statSync(LogFileAbPath);\r\n                        let isFile = CurState.isFile();\r\n                        isFile.should.be.ok();\r\n\r\n                        // 读取日志文件内容\r\n                        FileContent = FS.readFileSync(LogFileAbPath, { encoding : 'utf8'});\r\n                        // 判断内容\r\n                        FileContent.should.match(/\\[\\d+-\\d+-\\d+T\\d+:\\d+:\\d+\\.\\d+Z\\]\\s+\\[WARN\\]\\s+files-logger\\s+-\\s+test warn./);\r\n                    } catch (error) {\r\n                        console.log(error);\r\n                        CurState    = null;\r\n                        FileContent = null;\r\n                    }\r\n                    Should.notEqual(CurState, null);\r\n                    Should.notEqual(FileContent, null);\r\n\r\n                    resolve();\r\n                }, 1000);\r\n            });\r\n\r\n            let CurMsg = await CurClient.rpop(doc.defaultLoggers[2].container);\r\n            CurClient.disconnect();\r\n            await new Promise((resolve, reject) => {\r\n                CurClient.on('close', () => {\r\n                    resolve();\r\n                });\r\n            });\r\n\r\n            Should.notEqual(CurMsg, null);\r\n            let CurMsgObj = JSON.parse(CurMsg);\r\n            CurMsgObj.message.should.equal('test warn.');\r\n\r\n            await CurLogger.close();\r\n            done();\r\n        })();\r\n    });\r\n\r\n    it('info level', (done) => {\r\n        (async () => {\r\n            let CapturedText : string = \"\";\r\n            let doc = null;\r\n            try {\r\n                doc = Yaml.safeLoad(FS.readFileSync('./src/test/config/DefaultLoggerTestConfig-info.yml', 'utf8'));\r\n            } catch (error) {\r\n                Should.throws(error);\r\n            }\r\n            // 清理上次的输出结果\r\n            let LogFileAbPath = Path.join(process.cwd(), doc.defaultLoggers[1].filename)\r\n            try {\r\n                let LastState = FS.statSync(LogFileAbPath);\r\n                if (LastState.isFile()) {\r\n                    FS.unlinkSync(LogFileAbPath);\r\n                } else {\r\n                    FSEx.removeSync(LogFileAbPath);\r\n                }\r\n            } catch (error) {\r\n                // console.log(error)\r\n            }\r\n            \r\n            // 读取redis，验证写入内容\r\n            let CurClient = await Connect2Redis(\r\n                doc.defaultLoggers[2].host,\r\n                doc.defaultLoggers[2].port,\r\n                doc.defaultLoggers[2].auth\r\n            );\r\n\r\n            Should.notEqual(CurClient, null);\r\n            CurClient.del(doc.defaultLoggers[2].container);\r\n\r\n            let CurLogger = new C4Logger.C4Logger();\r\n            await CurLogger.init(doc);\r\n\r\n            // 开始捕获标准输出\r\n            let UnhookIntercept = Intercept((text) => {\r\n                CapturedText += text;\r\n            }, (err) => {});\r\n\r\n            CurLogger.info('test info.');\r\n            UnhookIntercept();\r\n            // 验证Console类型Logger\r\n            CapturedText.should.match(/\\[\\d+-\\d+-\\d+T\\d+:\\d+:\\d+\\.\\d+Z\\]\\s+\\[INFO\\]\\s+console-logger\\s+-\\s+test info./);\r\n\r\n            // 验证Files类型Logger\r\n            // 等一下，有可能文件还没有写入\r\n            await new Promise((resolve, reject) => {\r\n                setTimeout(() => {\r\n                    let CurState = null;\r\n                    let FileContent = null;\r\n                    try {\r\n                        // 日志文件是否存在\r\n                        CurState = FS.statSync(LogFileAbPath);\r\n                        let isFile = CurState.isFile();\r\n                        isFile.should.be.ok();\r\n\r\n                        // 读取日志文件内容\r\n                        FileContent = FS.readFileSync(LogFileAbPath, { encoding : 'utf8'});\r\n                        // 判断内容\r\n                        FileContent.should.match(/\\[\\d+-\\d+-\\d+T\\d+:\\d+:\\d+\\.\\d+Z\\]\\s+\\[INFO\\]\\s+files-logger\\s+-\\s+test info./);\r\n                    } catch (error) {\r\n                        console.log(error);\r\n                        CurState    = null;\r\n                        FileContent = null;\r\n                    }\r\n                    Should.notEqual(CurState, null);\r\n                    Should.notEqual(FileContent, null);\r\n\r\n                    resolve();\r\n                }, 1000);\r\n            });\r\n\r\n            let CurMsg = await CurClient.rpop(doc.defaultLoggers[2].container);\r\n            CurClient.disconnect();\r\n            await new Promise((resolve, reject) => {\r\n                CurClient.on('close', () => {\r\n                    resolve();\r\n                });\r\n            });\r\n\r\n            Should.notEqual(CurMsg, null);\r\n            let CurMsgObj = JSON.parse(CurMsg);\r\n            CurMsgObj.message.should.equal('test info.');\r\n\r\n            await CurLogger.close();\r\n            done();\r\n        })();\r\n    });\r\n\r\n    it('debug level', (done) => {\r\n        (async () => {\r\n            let CapturedText : string = \"\";\r\n            let doc = null;\r\n            try {\r\n                doc = Yaml.safeLoad(FS.readFileSync('./src/test/config/DefaultLoggerTestConfig-debug.yml', 'utf8'));\r\n            } catch (error) {\r\n                Should.throws(error);\r\n            }\r\n            // 清理上次的输出结果\r\n            let LogFileAbPath = Path.join(process.cwd(), doc.defaultLoggers[1].filename)\r\n            try {\r\n                let LastState = FS.statSync(LogFileAbPath);\r\n                if (LastState.isFile()) {\r\n                    FS.unlinkSync(LogFileAbPath);\r\n                } else {\r\n                    FSEx.removeSync(LogFileAbPath);\r\n                }\r\n            } catch (error) {\r\n                // console.log(error)\r\n            }\r\n            \r\n            // 读取redis，验证写入内容\r\n            let CurClient = await Connect2Redis(\r\n                doc.defaultLoggers[2].host,\r\n                doc.defaultLoggers[2].port,\r\n                doc.defaultLoggers[2].auth\r\n            );\r\n\r\n            Should.notEqual(CurClient, null);\r\n            CurClient.del(doc.defaultLoggers[2].container);\r\n\r\n            let CurLogger = new C4Logger.C4Logger();\r\n            await CurLogger.init(doc);\r\n\r\n            // 开始捕获标准输出\r\n            let UnhookIntercept = Intercept((text) => {\r\n                CapturedText += text;\r\n            }, (err) => {\r\n                CapturedText += err;\r\n            });\r\n\r\n            CurLogger.debug('test debug.');\r\n            UnhookIntercept();\r\n            // console.log(CapturedText);\r\n            // await new Promise((resovle) => {\r\n            //     setTimeout(() => {\r\n            //         resovle();\r\n            //     }, 2000);\r\n            // })\r\n            // 验证Console类型Logger\r\n            CapturedText.should.match(/\\[\\d+-\\d+-\\d+T\\d+:\\d+:\\d+\\.\\d+Z\\]\\s+\\[DEBUG\\]\\s+console-logger\\s+-\\s+test debug./);\r\n\r\n            // console.log('xxxxxxx');\r\n\r\n            // 验证Files类型Logger\r\n            // 等一下，有可能文件还没有写入\r\n            await new Promise((resolve, reject) => {\r\n                setTimeout(() => {\r\n                    let CurState = null;\r\n                    let FileContent = null;\r\n                    try {\r\n                        // 日志文件是否存在\r\n                        CurState = FS.statSync(LogFileAbPath);\r\n                        let isFile = CurState.isFile();\r\n                        isFile.should.be.ok();\r\n\r\n                        // 读取日志文件内容\r\n                        FileContent = FS.readFileSync(LogFileAbPath, { encoding : 'utf8'});\r\n                        // 判断内容\r\n                        FileContent.should.match(/\\[\\d+-\\d+-\\d+T\\d+:\\d+:\\d+\\.\\d+Z\\]\\s+\\[DEBUG\\]\\s+files-logger\\s+-\\s+test debug./);\r\n                    } catch (error) {\r\n                        console.log(error);\r\n                        CurState    = null;\r\n                        FileContent = null;\r\n                    }\r\n                    Should.notEqual(CurState, null);\r\n                    Should.notEqual(FileContent, null);\r\n\r\n                    resolve();\r\n                }, 1000);\r\n            });\r\n\r\n            let CurMsg = await CurClient.rpop(doc.defaultLoggers[2].container);\r\n            CurClient.disconnect();\r\n            await new Promise((resolve, reject) => {\r\n                CurClient.on('close', () => {\r\n                    resolve();\r\n                });\r\n            });\r\n\r\n            Should.notEqual(CurMsg, null);\r\n            let CurMsgObj = JSON.parse(CurMsg);\r\n            CurMsgObj.message.should.equal('test debug.');\r\n\r\n            await CurLogger.close();\r\n            done();\r\n        })();\r\n    });\r\n\r\n    it('trace level', (done) => {\r\n        (async () => {\r\n            let CapturedText : string = \"\";\r\n            let doc = null;\r\n            try {\r\n                doc = Yaml.safeLoad(FS.readFileSync('./src/test/config/DefaultLoggerTestConfig-trace.yml', 'utf8'));\r\n            } catch (error) {\r\n                Should.throws(error);\r\n            }\r\n            // 清理上次的输出结果\r\n            let LogFileAbPath = Path.join(process.cwd(), doc.defaultLoggers[1].filename)\r\n            try {\r\n                let LastState = FS.statSync(LogFileAbPath);\r\n                if (LastState.isFile()) {\r\n                    FS.unlinkSync(LogFileAbPath);\r\n                } else {\r\n                    FSEx.removeSync(LogFileAbPath);\r\n                }\r\n            } catch (error) {\r\n                // console.log(error)\r\n            }\r\n            \r\n            // 读取redis，验证写入内容\r\n            let CurClient = await Connect2Redis(\r\n                doc.defaultLoggers[2].host,\r\n                doc.defaultLoggers[2].port,\r\n                doc.defaultLoggers[2].auth\r\n            );\r\n\r\n            Should.notEqual(CurClient, null);\r\n            CurClient.del(doc.defaultLoggers[2].container);\r\n\r\n            let CurLogger = new C4Logger.C4Logger();\r\n            await CurLogger.init(doc);\r\n\r\n            // 开始捕获标准输出\r\n            let UnhookIntercept = Intercept((text) => {\r\n                CapturedText += text;\r\n            }, (err) => {});\r\n\r\n            CurLogger.trace('test trace.');\r\n            UnhookIntercept();\r\n            // 验证Console类型Logger\r\n            CapturedText.should.match(/\\[\\d+-\\d+-\\d+T\\d+:\\d+:\\d+\\.\\d+Z\\]\\s+\\[TRACE\\]\\s+console-logger\\s+-\\s+test trace./);\r\n\r\n            // 验证Files类型Logger\r\n            // 等一下，有可能文件还没有写入\r\n            await new Promise((resolve, reject) => {\r\n                setTimeout(() => {\r\n                    let CurState = null;\r\n                    let FileContent = null;\r\n                    try {\r\n                        // 日志文件是否存在\r\n                        CurState = FS.statSync(LogFileAbPath);\r\n                        let isFile = CurState.isFile();\r\n                        isFile.should.be.ok();\r\n\r\n                        // 读取日志文件内容\r\n                        FileContent = FS.readFileSync(LogFileAbPath, { encoding : 'utf8'});\r\n                        // 判断内容\r\n                        FileContent.should.match(/\\[\\d+-\\d+-\\d+T\\d+:\\d+:\\d+\\.\\d+Z\\]\\s+\\[TRACE\\]\\s+files-logger\\s+-\\s+test trace./);\r\n                    } catch (error) {\r\n                        console.log(error);\r\n                        CurState    = null;\r\n                        FileContent = null;\r\n                    }\r\n                    Should.notEqual(CurState, null);\r\n                    Should.notEqual(FileContent, null);\r\n\r\n                    resolve();\r\n                }, 1000);\r\n            });\r\n\r\n            let CurMsg = await CurClient.rpop(doc.defaultLoggers[2].container);\r\n            CurClient.disconnect();\r\n            await new Promise((resolve, reject) => {\r\n                CurClient.on('close', () => {\r\n                    resolve();\r\n                });\r\n            });\r\n\r\n            Should.notEqual(CurMsg, null);\r\n            let CurMsgObj = JSON.parse(CurMsg);\r\n            CurMsgObj.message.should.equal('test trace.');\r\n\r\n            await CurLogger.close();\r\n            done();\r\n        })();\r\n    });\r\n});\r\n"]}