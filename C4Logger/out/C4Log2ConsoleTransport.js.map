{"version":3,"file":"C4Log2ConsoleTransport.js","sourceRoot":"","sources":["../src/C4Log2ConsoleTransport.ts"],"names":[],"mappings":";;;;;;;;;;AACA,mCAA6C;AAM7C;IAEI,oCAAoC;IACpC,oCAAoC;IAEpC;QACI,IAAI,CAAC,WAAW,GAAM,IAAI,CAAC;QAC3B,4BAA4B;QAC5B,2BAA2B;IAC/B,CAAC;IAEK,IAAI,CAAC,SAAgD;;YACvD,mBAAmB;YACnB,IAAI,CAAC,WAAW,GAAM,IAAI,OAAO,CAAC,UAAU,CAAC,OAAO,CAAC;gBACjD,IAAI,EAAM,SAAS,CAAC,IAAI;gBACxB,KAAK,EAAK,SAAS,CAAC,KAAK,IAAI,SAAS,CAAC,IAAI;gBAC3C,KAAK,EAAK,SAAS,CAAC,KAAK,IAAI,MAAM;gBACnC,yCAAyC;gBACzC,gCAAgC;gBAEhC,4CAA4C;gBAC5C,gDAAgD;gBAChD,+DAA+D;gBAC/D,kDAAkD;gBAClD,+CAA+C;gBAE/C,iCAAiC;gBACjC,4CAA4C;gBAC5C,6CAA6C;gBAC7C,uCAAuC;gBACvC,YAAY;gBACZ,gEAAgE;gBAChE,QAAQ;gBAER,6CAA6C;gBAC7C,8CAA8C;gBAC9C,QAAQ;gBACR,KAAK;gBACL,SAAS,EAAG;oBACR,MAAM,CAAC,CAAC,IAAI,IAAI,EAAE,CAAC,CAAC,WAAW,EAAE,CAAC;gBACtC,CAAC;gBACD,IAAI,EAAG,KAAK;gBACZ,SAAS,EAAG,UAAS,OAAa;oBAC9B,MAAM,CAAC,GAAG,GAAG,OAAO,CAAC,SAAS,EAAE,GAAG,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC,WAAW,EAAE;0BAChE,IAAI,GAAG,OAAO,CAAC,KAAK,GAAG,KAAK,GAAG,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC;0BACvE,CAAC,OAAO,CAAC,IAAI,IAAI,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,GAAE,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE,CAAE,CAAC;gBAC1G,CAAC;gBACD,gBAAgB,EAAG,IAAI;gBACvB,+BAA+B,EAAG,IAAI;aACzC,CAAC,CAAC;QACP,CAAC;KAAA;IAED,WAAW,CAAC,KAA6B;QACrC,EAAE,CAAC,CAAC,IAAI,KAAK,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;YAC5B,IAAI,CAAC,WAAW,CAAC,KAAK,GAAI,KAAK,CAAC;QACpC,CAAC;IACL,CAAC;IAED,KAAK,KAAI,CAAC;IAEV,OAAO;QACH,EAAE,CAAC,CAAC,IAAI,KAAK,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;YAC5B,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC;QACjC,CAAC;QACD,MAAM,CAAC,EAAE,CAAC;IACd,CAAC;IAED,YAAY;QACR,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC;IAC5B,CAAC;CACJ;AAtED,wDAsEC","sourcesContent":["\nimport Winston          = require('winston');\nimport C4LoggerOptions  = require('./C4LoggerOptions');\nimport C4LogLevel       = require('./C4LogLevels');\n\nimport C4LogTransportInstance from './C4LogTransportInstance';\n\nexport class C4Log2ConsoleTransport implements C4LogTransportInstance {\n    private m_transport     : Winston.TransportInstance | null;\n    // private m_CurDate       : string;\n    // private m_CurDateCount  : number;\n\n    constructor() {\n        this.m_transport    = null;\n        // this.m_CurDate      = '';\n        // this.m_CurDateCount = 0;\n    }\n\n    async init(LogConfig : C4LoggerOptions.ConsoleLoggerOptions) {\n        // let Self = this;\n        this.m_transport    = new Winston.transports.Console({\n            name    : LogConfig.name,\n            label   : LogConfig.label || LogConfig.name,\n            level   : LogConfig.level || 'info',\n            // rotationFormat : function() : string {\n            //     return getForamtteDate();\n\n            //     function getForamtteDate() : string {\n            //         let temp : Date         = new Date();\n            //         let dateStr : string    = padStr(temp.getFullYear())\n            //             + '-' + padStr(temp.getMonth() + 1)\n            //             + '-' + padStr(temp.getDate());;\n                        \n            //         Self.m_CurDateCount++;\n            //         if (dateStr !== Self.m_CurDate) {\n            //             Self.m_CurDate      = dateStr;\n            //             Self.m_CurDateCount = 0;\n            //         }\n            //         return (dateStr + '_' + padStr(Self.m_CurDateCount));\n            //     }\n\n            //     function padStr(i : number) : string {\n            //         return (i < 10) ? \"0\" + i : \"\" + i;\n            //     }\n            // },\n            timestamp : function() : string {\n                return (new Date()).toISOString();\n            },\n            json : false,\n            formatter : function(options : any) : string {\n                return '[' + options.timestamp() + '] [' + options.level.toUpperCase()\n                    + '] ' + options.label + ' - ' + (options.message ? options.message : '')\n                    + (options.meta && Object.keys(options.meta).length ? '\\n\\t'+ JSON.stringify(options.meta) : '' );\n            },\n            handleExceptions : true,\n            humanReadableUnhandledException : true\n        });\n    }\n\n    changeLevel(Level : C4LogLevel.C4LogLevel) : void {\n        if (null !== this.m_transport) {\n            this.m_transport.level  = Level;\n        }\n    }\n\n    close() {}\n\n    getName() : string {\n        if (null !== this.m_transport) {\n            return this.m_transport.name;\n        }\n        return '';\n    }\n\n    getTransport() : Winston.TransportInstance | null {\n        return this.m_transport;\n    }\n}\n"]}